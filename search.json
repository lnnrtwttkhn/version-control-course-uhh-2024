[
  {
    "objectID": "implementation.html",
    "href": "implementation.html",
    "title": "Implementation",
    "section": "",
    "text": "In the Supporting Information S2 ‚ÄúTips for course organizers‚Äù of their article ‚ÄúTen simple rules for implementing open and reproducible research practices after attending a training course‚Äù (License: CC BY 4.0), Heise et al. (2023) outline actions that course organizers can take to prepare and support course participants in implementing what they have learned once they return to their research environment."
  },
  {
    "objectID": "implementation.html#when-designing-a-course",
    "href": "implementation.html#when-designing-a-course",
    "title": "Implementation",
    "section": "When designing a course",
    "text": "When designing a course\n\n1. Consider participants‚Äô background and research type when designing materials.\n\n\n2. Cover a range of topics in your course.\n\n\n3. Talk about top-down robust research policies.\n\n\n4. Include information on ‚Äúsoft skills‚Äù related to behavioral change in research groups.\n\n\n5. Give participants time to start implementing practices.\n\n\n6. Consider offering a series of sessions, instead of covering many topics in a short period of time."
  },
  {
    "objectID": "implementation.html#when-participants-return-to-their-own-research-environments",
    "href": "implementation.html#when-participants-return-to-their-own-research-environments",
    "title": "Implementation",
    "section": "When participants return to their own research environments",
    "text": "When participants return to their own research environments\n\n1. Make your teaching materials and resources open and reusable.\n\n\n2. Create (and support) communities.\n\n\n3. Support implementation.\n\n\n4. Consider follow-up events"
  },
  {
    "objectID": "implementation.html#references",
    "href": "implementation.html#references",
    "title": "Implementation",
    "section": "References",
    "text": "References\n\n\nHeise, V., Holman, C., Lo, H., Lyras, E. M., Adkins, M. C., Aquino, M. R. J., Bougioukas, K. I., Bray, K. O., Gajos, M., Guo, X., Hartling, C., Huerta-Gutierrez, R., Jindrov√°, M., Kenney, J. P. M., Kƒôpi≈Ñska, A. P., Kneller, L., Lopez-Rodriguez, E., M√ºhlensiepen, F., Richards, A., ‚Ä¶ Weissgerber, T. L. (2023). Ten simple rules for implementing open and reproducible research practices after attending a training course. PLOS Computational Biology, 19(1), e1010750. https://doi.org/10.1371/journal.pcbi.1010750. License: CC BY 4.0."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "What? This is the course website for the full-day course ‚ÄúTrack, organize and share your work: An introduction to Git for research‚Äù at the General Psychology Lab at the University of Hamburg\n When? Friday, September 27th 2024, 9:30 to 15:30\n Where? General Psychology Lab at the University of Hamburg, Von-Melle-Park 5, 20146 Hamburg, Room 4054 / William-Stern-Room\n Who? This course is offered to Researchers at the General Psychology Lab at the University of Hamburg"
  },
  {
    "objectID": "about.html#overview",
    "href": "about.html#overview",
    "title": "About",
    "section": "",
    "text": "What? This is the course website for the full-day course ‚ÄúTrack, organize and share your work: An introduction to Git for research‚Äù at the General Psychology Lab at the University of Hamburg\n When? Friday, September 27th 2024, 9:30 to 15:30\n Where? General Psychology Lab at the University of Hamburg, Von-Melle-Park 5, 20146 Hamburg, Room 4054 / William-Stern-Room\n Who? This course is offered to Researchers at the General Psychology Lab at the University of Hamburg"
  },
  {
    "objectID": "about.html#description",
    "href": "about.html#description",
    "title": "About",
    "section": "Description",
    "text": "Description\n\nContent\nIn today‚Äôs digital age, the majority of scientific insights in research are gained from the analysis of data using programming code. Although data and code are integral parts of their work, scientists often handle digital objects on their computers in a somewhat chaotic, unreliable, and irreproducible manner. It‚Äôs not uncommon to hear researchers wondering, ‚ÄúWhich version of my data and code did I use to get this result?‚Äù or ‚ÄúI found a bug in my code. Since when was it there?‚Äù and ‚ÄúThis code used to work! What did I change?‚Äù. This not only affects the reproducibility and trustworthiness of science but also frequently leads to frustration, a waste of time, and, at worst, the loss of painstakingly accumulated work. The good news is that scientists can learn about practices and tools from other disciplines, particularly software engineering, that have significantly professionalized collaborative work on digital objects like programming code. At the core of this toolkit is the free and open-source software Git, a so-called version control system that allows tracking and organizing the evolution of digital objects on computers and sharing them via platforms like GitHub. In this hands-on course with practical exercises, participants will learn how to track, organize and share their work using Git.\n\n\nGoals\nThe primary aim of this course is to empower course participants with the skills to efficiently organize projects on their computers using Git and GitHub. Participants will actively engage in hands-on experiences with these tools, exploring both the command-line and Graphical User Interfaces. Proficiency in Git and GitHub not only enhances participants‚Äô effectiveness in conducting research projects by ensuring organized and reproducible workflows but also elevates their employability. The technical skills acquired in this course are increasingly sought after in various work settings, providing course participants with a competitive edge in today‚Äôs dynamic job market.\n\n\nMechanics\nGuided by the seminar instructor, participants will engaging in practical hands-on exercises with Git and GitHub while working through a dedicated Git Handbook (https://lennartwittkuhn.com/version-control-book/) that is tuned to the structure of the course and needs of the course participants."
  },
  {
    "objectID": "about.html#instructor",
    "href": "about.html#instructor",
    "title": "About",
    "section": "Instructor",
    "text": "Instructor\n\n\n\n\n\nDr.¬†Lennart Wittkuhn\nLennart is a Postdoctoral Researcher in the Research Group ‚ÄúCognitive Neuroscience of Learning and Change‚Äù at the University of Hamburg. In his scientific work, Lennart investigates neural replay of task representations in the human brain using functional magnetic resonance imaging (fMRI). He is also passionate about open science, research data management, reproducibility and tools that improve the scientific workflow.\nFind out more about Lennart and his work at https://lennartwittkuhn.com/."
  },
  {
    "objectID": "sessions/slides_session02.html#schedule",
    "href": "sessions/slides_session02.html#schedule",
    "title": "Session 2: Basics of the Command Line",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\nNo\nTime\nTitle\nContents\nReading\nSurvey/Quiz\n\n\n\n\n1\n9:30 - 10:00\nWelcome & Introduction to Version Control\nLogistics and course adminResults of course surveyIntroduction to Version ControlIntroduction to Git\n Introduction to Version Control\nCourse survey\n\n\n2\n10:00 - 10:45\nBasics of the Command Line\nFile systems and navigationBenefits of the command lineBasic command line commands\n Command Line\nCommand Line Quiz\n\n\n3\n10:45 - 11:30\nSetup & First steps with Git\nConfiguration and setup of GitInitializing a Git repositoryFundamental Git commands\n Setup, First steps with Git\nGit Basics Quiz\n\n\n4\n11:30 - 12:15\nBranches, Merging & Merge Conflicts\nUnderstanding branches in GitCreating and switching between branchesMerging branchesResolving merge conflicts\n Branches\nGit Branches Quiz\n\n\n5\n12:30 - 13:30\nLunch Break\nEnjoy your lunch!\n\n\n\n\n6\n13:30 - 14:15\nIntegration with GitLab / GitHub\nIntroduction to remote repositoriesCreating and managing repositories on GitLab / GitHubPushing and pulling changesCloning a remote repository\n Remotes Intro\nGitHub Quiz\n\n\n7\n14:15 - 15:00\nCollaboration on GitLab / GitHub\nForkingCollaboration with GitHub FlowPull / Merge RequestsIssuesREADME files\n GitHub Advanced, GitHub Issues\nGitHub Quiz\n\n\n8\n15:00 - 15:30\nSummary & Outlook\nSummary of course contentsOutlook to more Git topicsDiscussing open questions"
  },
  {
    "objectID": "sessions/slides_session02.html#course-exercise-building-an-online-recipes-book",
    "href": "sessions/slides_session02.html#course-exercise-building-an-online-recipes-book",
    "title": "Session 2: Basics of the Command Line",
    "section": "Course exercise: Building an online recipes book",
    "text": "Course exercise: Building an online recipes book\n https://lennartwittkuhn.com/recipes"
  },
  {
    "objectID": "sessions/slides_session02.html#this-session-meta-session-title",
    "href": "sessions/slides_session02.html#this-session-meta-session-title",
    "title": "Session 2: Basics of the Command Line",
    "section": "This session: Basics of the Command Line",
    "text": "This session: Basics of the Command Line\n\nSource: Wikimedia Commons (free license)"
  },
  {
    "objectID": "sessions/slides_session02.html#learning-objectives",
    "href": "sessions/slides_session02.html#learning-objectives",
    "title": "Session 2: Basics of the Command Line",
    "section": "Learning objectives",
    "text": "Learning objectives\nüí° You can navigate directories using the command line. üí° You can use shortcuts like the tilde or dots to navigate your file system. üí° You can explain the difference between absolute and relative paths. üí° You can use arguments and flags to modify command-line commands. üí° You understand the concept of wild cards (*) and can use it for system navigation."
  },
  {
    "objectID": "sessions/slides_session02.html#reading",
    "href": "sessions/slides_session02.html#reading",
    "title": "Session 2: Basics of the Command Line",
    "section": "Reading",
    "text": "Reading\n https://lennartwittkuhn.com/version-control-book/chapters/command-line.html"
  },
  {
    "objectID": "sessions/slides_session02.html#cheatsheet",
    "href": "sessions/slides_session02.html#cheatsheet",
    "title": "Session 2: Basics of the Command Line",
    "section": "Cheatsheet",
    "text": "Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\npwd\nDisplays the path of the current working directory\n\n\ncd &lt;PATH&gt;\nChanges the current working directory to &lt;PATH&gt;\n\n\ncd ~\nChanges the current working directory to the user‚Äôs home directory\n\n\ncd ..\nMoves up one folder\n\n\ncd ../..\nMoves up two folders\n\n\nclear\nClears the contents of your command line window\n\n\nls\nLists files and folders in the current working directory\n\n\nls &lt;PATH&gt;\nLists files and folders in &lt;PATH&gt;\n\n\nls -a\nLists all files (including hidden files) in the current working directory\n\n\nls -alh\nLists all files in a long format that is easy to read for humans\n\n\n[Command] --help\nDisplays all possible flags for a specific command (on Windows)\n\n\nman [Command]\nDisplays all possible flags for a specific command (on macOS)\n\n\nmkdir &lt;FOLDER&gt;\nCreates a new folder called &lt;FOLDER&gt;\n\n\nmkdir &lt;FOLDER1&gt; &lt;FOLDER2&gt;\nCreates two separate folders called &lt;FOLDER1&gt; and &lt;FOLDER2&gt;\n\n\ntouch &lt;FILE&gt;\nCreates a new empty file called &lt;FILE&gt;\n\n\nopen &lt;FILE&gt;\nOpens the file called &lt;FILE&gt; (on macOS)\n\n\nstart &lt;FILE&gt;\nOpens the file called &lt;FILE&gt; (on Windows)\n\n\necho \"example text\" &gt;&gt; file.txt\nWrites ‚Äúexample text‚Äù into file.txt\n\n\ncat &lt;FILE&gt;\nDisplays the content of &lt;FILE&gt;\n\n\nmv FILE.txt &lt;FOLDER&gt;\nMove FILE.txt into &lt;FOLDER&gt;\n\n\nmv &lt;FOLDER_OLD&gt; &lt;FOLDER_NEW&gt;\nRenames &lt;FOLDER_OLD&gt; to &lt;FOLDER_NEW&gt;\n\n\nls -alh *.csv\nUses a wildcard to list all .csv files in the current working directory\n\n\nrm -r &lt;FOLDER&gt;\nRemoves the folder &lt;FOLDER&gt;\n\n\nhistory\nDisplay the command history of the current terminal session\n\n\nhistory &gt; history.txt\nSaves the entire command history to a file named history.txt (overwrites existing content in history.txt)\n\n\nhistory &gt;&gt; history.txt\nAdds the entire command history to the end of the file named history.txt\n\n\ntree\nDisplays a graphical representation of the directory structure\n\n\nwget &lt;URL&gt;\nDownloads a file from the specified  to the current directory"
  },
  {
    "objectID": "sessions/slides_session02.html#tasks",
    "href": "sessions/slides_session02.html#tasks",
    "title": "Session 2: Basics of the Command Line",
    "section": "Tasks",
    "text": "Tasks\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚ÄúCommand Line‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/slides_session02.html#recipes-project",
    "href": "sessions/slides_session02.html#recipes-project",
    "title": "Session 2: Basics of the Command Line",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou used the command line to create a folder on your computer called recipes.\nYou used the command line to create a file called recipes.txt inside the recipes folder.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/slides_session02.html#exercises",
    "href": "sessions/slides_session02.html#exercises",
    "title": "Session 2: Basics of the Command Line",
    "section": "Exercises",
    "text": "Exercises\nNavigate the file system\nIdentify a folder on your computer where you (want to) keep course-related files. If you don‚Äôt have one, choose a suitable location in your file system.\n\nNavigate into the chosen location.\nUse the command line to display the path of your chosen folder.\n\nCreate files and folders\n\nCreate a new subfolder and name it recipes.\nNavigate into the recipes subfolder.\nCreate a new file and name it recipes.txt.\nConfirm that the files was created by listing the contents of the folder."
  },
  {
    "objectID": "sessions/slides_session02.html#solutions",
    "href": "sessions/slides_session02.html#solutions",
    "title": "Session 2: Basics of the Command Line",
    "section": "Solutions",
    "text": "Solutions\nNavigate the file system\n\n\n\nCode\n\ncd /path/to/your/chosen/directory # &lt;1&gt;\n\n\n\nNavigate into the chosen location. Replace /path/to/your/chosen/directory with a path on your computer. A good location might be within your /Documents folder or a dedicated /Projects or /University folder. This can help to easily find course-related files on your computer.\n\nCreate files and folders\n\n\n\nCode\n\n#!/bin/bash\n\npwd # &lt;2&gt;\nmkdir recipes # &lt;3&gt;\ncd recipes # &lt;4&gt;\ntouch recipes.txt # &lt;5&gt;\nls # &lt;6&gt;\n\n\n\nUse pwd to display the path of your chosen folder.\nUse mkdir to create a new subfolder and name it recipes, within your chosen folder.\nUse cd recipes to navigate into the recipes subfolder.\nUse touch recipes.txt to create a new file and name it recipes.txt.\nUse ls to confirm that the files was created by listing the contents of the folder.\n\n\n\nVersion Control Course"
  },
  {
    "objectID": "sessions/session03.html",
    "href": "sessions/session03.html",
    "title": "Setup & First steps with Git",
    "section": "",
    "text": "Slides\n  \n  \n    \n     Chapter: Setup\n  \n  \n    \n     Chapter: First steps with Git\n  \n  \n    \n     Chapter: Git Essentials\n  \n  \n    \n     Survey: Git Basics"
  },
  {
    "objectID": "sessions/session03.html#this-session",
    "href": "sessions/session03.html#this-session",
    "title": "Setup & First steps with Git",
    "section": "This session",
    "text": "This session\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapters ‚ÄúSetup‚Äù, ‚ÄúFirst steps with Git‚Äù and, optional, ‚ÄúGit Essentials‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/session03.html#learning-objectives",
    "href": "sessions/session03.html#learning-objectives",
    "title": "Setup & First steps with Git",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nSetup\nüí° You know how to set up Git for the first time üí° You have set up Git on your computer üí° You understand the difference between the three Git configuration levels üí° You know how to configure your username and email address in Git üí° You have set up your preferred text editor when working with Git üí° You can escape the command-line text editor Vim\n\n\nFirst steps with Git\nüí° You can initialize a Git repository üí° You can stage and commit changes\n\n\nüöÄ Optional: Git essentials\nüí° You know how to explore the commit history üí° You can compare different commits üí° You know how to use and create a .gitignore file üí° You can discuss which files can (not) be tracked well with Git and why üí° You know how to track empty folders in Git repositories"
  },
  {
    "objectID": "sessions/session03.html#recipes-project",
    "href": "sessions/session03.html#recipes-project",
    "title": "Setup & First steps with Git",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou set up Git.\nYou initialized your recipes folder as a Git repository.\nYou committed your first recipe to the recipes repository.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/session03.html#exercises",
    "href": "sessions/session03.html#exercises",
    "title": "Setup & First steps with Git",
    "section": "Exercises",
    "text": "Exercises\n\nConfigure Git\n\nIf needed, navigate into the recipes folder using the command line.\nSet your Git username.\nSet your Git email address.\nChange the default name of the initial branch to main\nüöÄ Optional: Change your default text editor.\nList the Git configuration settings.\n\n\n\nInitialize a Git repository\n\nIf needed, navigate to the recipes folder using the command line.\nInitialize a new Git repository in the recipes folder.\n\n\n\nAdd content and commit changes\n\nCreate a new file called recipes.txt.\nAdd a short recipe to recipes.txt (any favorite or an intriguing AI-generated one).\nStage the new recipes.txt file.\nCommit the changes in recipes.txt with a descriptive commit message.\n\nüöÄ Optional: Commit at least three additional changes in recipes.txt."
  },
  {
    "objectID": "sessions/session03.html#bonus-exercises",
    "href": "sessions/session03.html#bonus-exercises",
    "title": "Setup & First steps with Git",
    "section": "üöÄ Bonus exercises",
    "text": "üöÄ Bonus exercises\n\nAmend a commit\n\nIf needed, navigate into the recipes repository using cd recipes (or a similar path).\nMake additional changes to your recipes.txt file.\nStage the changes.\nAmend the previous commit to include the new changes.\nCheck the commit history to verify that the last commit message has not changed.\n\nFor example, add a recipe without a title first, commit, then add a title and amend the previous commit to add the title change to the same commit.\n\n\nCreate a .gitignore file\n\nIf needed, navigate into the recipes repository using cd recipes (or a similar path).\nAdd a random file to your repository that you want to ignore, for example an image file like image.jpg.\nCheck the state of your repository to confirm that Git noticed the added file.\nCreate a .gitignore file.\nAdd the random file to the .gitignore file.\nCheck the state of your repository again to confirm that Git now ignores the added file.\nStage the changes in your repository.\nCommit the .gitignore file using a descriptive commit message.\nüöÄ All macOS users: Let your repository ignore .DS_Store."
  },
  {
    "objectID": "sessions/session03.html#slides",
    "href": "sessions/session03.html#slides",
    "title": "Setup & First steps with Git",
    "section": "Slides",
    "text": "Slides\n\n\n\n\n\n\n\nHow can I download the slides as a PDF file?\n\n\n\n\n\nTo export the slides to PDF, do the following:\n\nToggle into Print View using the E key (or using the Navigation Menu).\nOpen the in-browser print dialog (CTRL/CMD+P).\nChange the Destination setting to Save as PDF.\nChange the Layout to Landscape.\nChange the Margins to None.\nEnable the Background graphics option.\nClick Save.\n\nNote: This feature has been confirmed to work in Google Chrome, Chromium as well as in Firefox.\nHere‚Äôs what the Chrome print dialog would look like with these settings enabled:\n\nThese instructions were copied from the Quarto documentation (MIT License) and slightly modified."
  },
  {
    "objectID": "sessions/session03.html#cheatsheet",
    "href": "sessions/session03.html#cheatsheet",
    "title": "Setup & First steps with Git",
    "section": "Cheatsheet",
    "text": "Cheatsheet\n\nSetup\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit config\nGet an overview of Git config commands\n\n\ngit config --global \"user.name\"\nSets Git username\n\n\ngit config --global \"user.email\"\nSets Git email address\n\n\ngit config --global core.editor \"editorname\"\nSets Git text editor\n\n\ngit config --global init.defaultBranch main\nSets default branch name to main\n\n\ngit config --list\nViews set Git configurations\n\n\n\n\n\n\n\nFirst steps with Git\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit init\nInitializes a folder as a Git repository\n\n\ngit status\nShows Git tracking status of files in the repository\n\n\ngit add\nAdds file(s) to the staging area\n\n\ngit commit\nCommits staged files\n\n\ngit commit -m \"commit message\"\nCommits staged files with a commit message\n\n\n\n\n\n\n\nGit essentials\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit log\nViews past commits\n\n\ngit diff\nViews made changes compared to the last commit"
  },
  {
    "objectID": "sessions/session_extraexercise.html",
    "href": "sessions/session_extraexercise.html",
    "title": "Extra Assignment: Advanced GitHub",
    "section": "",
    "text": "Chapter: GitHub\n  \n  \n    \n     Survey: GitHub"
  },
  {
    "objectID": "sessions/session_extraexercise.html#background",
    "href": "sessions/session_extraexercise.html#background",
    "title": "Extra Assignment: Advanced GitHub",
    "section": "1 Background",
    "text": "1 Background\nIf you missed more than two course sessions, you are asked to complete an additional assignment. This additional assignment builds on the contents of previous course sessions and is (roughly) the equivalent of what you would complete in a regular course session. If you need help, please consult the relevant chapters in the Version Control Book (in particular the chapter on GitHub). While the assignment covers many aspects of our course, it‚Äôs not an exam. So please get in touch if you are getting stuck or have any questions about the assignment or the course contents.\nSubmission Deadline: Friday, Feb 2nd, 2024"
  },
  {
    "objectID": "sessions/session_extraexercise.html#assignment",
    "href": "sessions/session_extraexercise.html#assignment",
    "title": "Extra Assignment: Advanced GitHub",
    "section": "2 Assignment",
    "text": "2 Assignment\n\n2.1 Editing content on GitHub\n\n2.1.1 Create a README.md file\nIf you did not create a README.md file in your recipes repository already:\n\nGo to your recipes repository‚Äôs main page and click on ‚ÄúAdd a README‚Äù.\nUse Markdown syntax and add the most important facts about the repository.\nClick on ‚ÄúCommit changes‚Äù and write a relevant commit message.\n\n\n\n2.1.2 Clean up your recipes repository\nIf you have unnecessary files in your recipes repository:\n\nClick on the file you want to delete and choose ‚ÄúDelete file‚Äù.\nCommit the change and choose a commit message.\nPull the changes to your local repository (i.e., to your computer).\n\nYou complete this assignment by sending a link to your recipes repository to Lennart.\n\n\n\n2.2 Forking\n\nFind out what forking is.\nFork Lennart‚Äôs recipes repository.\nCreate an issue in Lennart‚Äôs repository (maybe the repo is missing a great recipe?).\nClone the forked repository to your computer.\nCreate a new branch and make one or multiple commits, ‚Äúfixing‚Äù the issue.\nPush your changes to GitHub.\nCreate a pull request with your changes (hint: from the forked to the original repository) and refer to the issue.\n\nYou complete this assignment by sending a pull request to Lennart‚Äôs recipes repository from a fork.\nHint: Check out Matteo‚Äôs contribution to Lennart‚Äôs recipes repository for a similar procedure."
  },
  {
    "objectID": "sessions/session_extraexercise.html#bonus-tags-and-releases",
    "href": "sessions/session_extraexercise.html#bonus-tags-and-releases",
    "title": "Extra Assignment: Advanced GitHub",
    "section": "3 Bonus: Tags and Releases",
    "text": "3 Bonus: Tags and Releases\nThis is a bonus assignment. It‚Äôs not required to make up for more that two missed course sessions. But maybe you are on a roll now, so why not?\n\nRead the Tags and Releases chapter.\nCreate a tag, marking the current version of your recipes repository.\nCreate a release of your tagged repository version on GitHub.\nTry out the Zenodo Sandbox to generate a DOI for your repository."
  },
  {
    "objectID": "sessions/session08.html",
    "href": "sessions/session08.html",
    "title": "Summary & Outlook",
    "section": "",
    "text": "Feedback survey"
  },
  {
    "objectID": "sessions/session08.html#slides",
    "href": "sessions/session08.html#slides",
    "title": "Summary & Outlook",
    "section": "Slides",
    "text": "Slides\n\n\n\n\n\n\n\nHow can I download the slides as a PDF file?\n\n\n\n\n\nTo export the slides to PDF, do the following:\n\nToggle into Print View using the E key (or using the Navigation Menu).\nOpen the in-browser print dialog (CTRL/CMD+P).\nChange the Destination setting to Save as PDF.\nChange the Layout to Landscape.\nChange the Margins to None.\nEnable the Background graphics option.\nClick Save.\n\nNote: This feature has been confirmed to work in Google Chrome, Chromium as well as in Firefox.\nHere‚Äôs what the Chrome print dialog would look like with these settings enabled:\n\nThese instructions were copied from the Quarto documentation (MIT License) and slightly modified."
  },
  {
    "objectID": "sessions/session08.html#email",
    "href": "sessions/session08.html#email",
    "title": "Summary & Outlook",
    "section": "Email",
    "text": "Email\nDear course participants,\nYou are receiving this email because you took part in the course ‚ÄúTrack, organize and share your work: An introduction to Git for research‚Äù, which took place on Friday, September 27th 2024, 9:30 to 15:30 at the General Psychology Lab at the University of Hamburg. Thank you very much for your participation!\nWith this email, we would kindly ask you for your feedback. Your valuable feedback will help us improve future versions of this course but also other courses on related topics. We have prepared an online survey that should not take much longer than up to 15 minutes to complete.\nThe feedback survey can be accessed here: https://version-control-feedback.formr.org/.\nPlease use the same personal and course codeword as before, which allows us to associate your responses with the specific course that you took part in. As a reminder, the course codeword is -------- (course password will be announced during the course). Thank you very much for your feedback!\nThe course materials will continue to be available on the course website at https://lennartwittkuhn.com/version-control-course-uhh-2024/. We will also continue the development on the ‚ÄúVersion Control Book‚Äù available at https://lennartwittkuhn.com/version-control-book. Feel free to take a look at it again at any later point of your Git journey.\nIf you have any questions, feel free to contact us directly via email.\nThank you again for your participation and feedback!\nBest wishes,\nLennart Wittkuhn (Instructor) and the organizing team"
  },
  {
    "objectID": "sessions/slides_session08.html#schedule",
    "href": "sessions/slides_session08.html#schedule",
    "title": "Session 8: Summary & Outlook",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\nNo\nTime\nTitle\nContents\nReading\nSurvey/Quiz\n\n\n\n\n1\n9:30 - 10:00\nWelcome & Introduction to Version Control\nLogistics and course adminResults of course surveyIntroduction to Version ControlIntroduction to Git\n Introduction to Version Control\nCourse survey\n\n\n2\n10:00 - 10:45\nBasics of the Command Line\nFile systems and navigationBenefits of the command lineBasic command line commands\n Command Line\nCommand Line Quiz\n\n\n3\n10:45 - 11:30\nSetup & First steps with Git\nConfiguration and setup of GitInitializing a Git repositoryFundamental Git commands\n Setup, First steps with Git\nGit Basics Quiz\n\n\n4\n11:30 - 12:15\nBranches, Merging & Merge Conflicts\nUnderstanding branches in GitCreating and switching between branchesMerging branchesResolving merge conflicts\n Branches\nGit Branches Quiz\n\n\n5\n12:30 - 13:30\nLunch Break\nEnjoy your lunch!\n\n\n\n\n6\n13:30 - 14:15\nIntegration with GitLab / GitHub\nIntroduction to remote repositoriesCreating and managing repositories on GitLab / GitHubPushing and pulling changesCloning a remote repository\n Remotes Intro\nGitHub Quiz\n\n\n7\n14:15 - 15:00\nCollaboration on GitLab / GitHub\nForkingCollaboration with GitHub FlowPull / Merge RequestsIssuesREADME files\n GitHub Advanced, GitHub Issues\nGitHub Quiz\n\n\n8\n15:00 - 15:30\nSummary & Outlook\nSummary of course contentsOutlook to more Git topicsDiscussing open questions"
  },
  {
    "objectID": "sessions/slides_session08.html#learning-objectives",
    "href": "sessions/slides_session08.html#learning-objectives",
    "title": "Session 8: Summary & Outlook",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nSession 1: Introduction to Version Control\nüí° You know what version control is. üí° You can argue why version control is useful (for research). üí° You can name benefits of Git compared to other approaches to version control. üí° You can explain the difference between Git and GitHub.\nSession 2: Basics of the Command Line\nüí° You can navigate directories using the command line. üí° You can use shortcuts like the tilde or dots to navigate your file system. üí° You can explain the difference between absolute and relative paths. üí° You can use arguments and flags to modify command-line commands. üí° You understand the concept of wild cards (*) and can use it for system navigation.\nSession 3: First steps with Git\nüí° You can initialize a Git repository üí° You can stage and commit changes"
  },
  {
    "objectID": "sessions/slides_session08.html#learning-objectives-continued",
    "href": "sessions/slides_session08.html#learning-objectives-continued",
    "title": "Session 8: Summary & Outlook",
    "section": "Learning Objectives (continued)",
    "text": "Learning Objectives (continued)\nSession 4: Branches\nüí° You understand the purpose and benefits of using branches in Git. üí° You can create and switch between branches. üí° You can merge branches and resolve merge conflicts. üí° You can name at least three best practices when working with branches.\nSession 6: Integration with GitLab / GitHub\nüí° You can create a remote repository. üí° You can connect your local Git to a remote repository service. üí° You can pull and push changes to and from a remote repository. üí° You can clone a repository from a remote repository service.\nSession 7: Collaboration on GitLab / GitHub\nüí° You can fork a repository. üí° You know the purpose and components of a Pull Request. üí° You can create a Pull Request from a forked repository. üí° You know how to collaborate using the popular workflow strategy GitHub flow. üí° You know the purpose and components of a README file. üí° You can protect your main branch."
  },
  {
    "objectID": "sessions/slides_session08.html#quizzes",
    "href": "sessions/slides_session08.html#quizzes",
    "title": "Session 8: Summary & Outlook",
    "section": "Quizzes",
    "text": "Quizzes\nTest your Git knowledge with quizzes (also after the course):\n\nIntroduction: https://version-control-versioncontrol.formr.org\nCommand Line: https://version-control-cli.formr.org/\nGit Basics: https://version-control-basics.formr.org/\nBranches: https://version-control-branches.formr.org/\nGitHub: https://version-control-github.formr.org/\n\nFeel free to enter your personal and course codeword!"
  },
  {
    "objectID": "sessions/slides_session08.html#tags-releases-dois-integration-with-zenodo",
    "href": "sessions/slides_session08.html#tags-releases-dois-integration-with-zenodo",
    "title": "Session 8: Summary & Outlook",
    "section": "Tags, releases, DOIs: Integration with Zenodo",
    "text": "Tags, releases, DOIs: Integration with Zenodo\n\n\n\n\n‚ÄúZenodo, a CERN service, is an open dependable home for the long-tail of science, enabling researchers to share and preserve any research outputs in any size, any format and from any science.‚Äù ‚Äì from the Zenodo GitHub README\n\n\n\n\n\nZenodo Logo (CC0 license)\n\n\n\n\n\n\n\nIntegrate your repository on GitHub with Zenodo\n\n‚ÄúTo make your repositories easier to reference in academic literature, you can create persistent identifiers, also known as Digital Object Identifiers (DOIs). You can use the data archiving tool Zenodo to archive a repository on GitHub.com and issue a DOI for the archive.‚Äù ‚Äì Details in the GitHub documentation\n\n\n\n\n\n\nNavigate to the login page for Zenodo.\nClick Log in with GitHub.\nReview the information about access permissions, then click Authorize zenodo.\nNavigate to the Zenodo GitHub page.\nTo the right of the name of the repository you want to archive, toggle the button to On.\n\nSee our book chapter on ‚ÄúTags & Releases‚Äù.\n\n\n\n\n‚ÄúMaking your project citable‚Äù by CodeRefinery (CC BY 4.0)\n\n\n\n\n\n\n\nCERN, the European Organization for Nuclear Research, is one of the world‚Äôs largest and most respected centres for scientific research.\n\n\n\n\nDemonstration: We are now going to add a DOI to this presentation."
  },
  {
    "objectID": "sessions/slides_session08.html#graphical-user-interfaces-guis-for-git",
    "href": "sessions/slides_session08.html#graphical-user-interfaces-guis-for-git",
    "title": "Session 8: Summary & Outlook",
    "section": "Graphical User Interfaces (GUIs) for Git",
    "text": "Graphical User Interfaces (GUIs) for Git\n\n\n\n\nIntegrated Development Environments (IDEs)\nRStudio\n\n\n\n\n\n\n\n\nMATLAB\n\n\n\n\n\n\n\n\n\nGit Clients\nGitKraken\n\n\n\n\n\n\n\n\nGitHub Desktop\n\n\n\n\n\n\n\n\n\nMobile\nWorking Copy (iOS)"
  },
  {
    "objectID": "sessions/slides_session08.html#continuous-integration-deployment-cicd",
    "href": "sessions/slides_session08.html#continuous-integration-deployment-cicd",
    "title": "Session 8: Summary & Outlook",
    "section": "Continuous Integration & Deployment (CI/CD)",
    "text": "Continuous Integration & Deployment (CI/CD)\n\n\n\n\n\nfrom Suresoft\n\n\n\nExample: Lennart‚Äôs recipes repo\n\nAutomated spell check\nRebuilding of project website\n\n https://lennartwittkuhn.com/recipes"
  },
  {
    "objectID": "sessions/slides_session08.html#version-control-for-data-datalad",
    "href": "sessions/slides_session08.html#version-control-for-data-datalad",
    "title": "Session 8: Summary & Outlook",
    "section": "Version Control for data: DataLad",
    "text": "Version Control for data: DataLad\n\n\n\n‚Ä¶ for data (binary files) \n\n\n\nSadly, Git does not handle large files well. \n\n\n\n\n\n\n\n\ndatalad.org (from the DataLad Handbook by Wagner et al.)"
  },
  {
    "objectID": "sessions/slides_session08.html#feedback-1",
    "href": "sessions/slides_session08.html#feedback-1",
    "title": "Session 8: Summary & Outlook",
    "section": "Feedback",
    "text": "Feedback\n\nPlease complete the feedback survey: https://version-control-feedback.formr.org/\nThis should not take much longer than 15 minutes."
  },
  {
    "objectID": "sessions/session02.html",
    "href": "sessions/session02.html",
    "title": "Basics of the Command Line",
    "section": "",
    "text": "Slides\n  \n  \n    \n     Chapter\n  \n  \n    \n     Exercises"
  },
  {
    "objectID": "sessions/session02.html#this-session",
    "href": "sessions/session02.html#this-session",
    "title": "Basics of the Command Line",
    "section": "This session",
    "text": "This session\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚ÄúCommand Line‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/session02.html#learning-objectives",
    "href": "sessions/session02.html#learning-objectives",
    "title": "Basics of the Command Line",
    "section": "Learning objectives",
    "text": "Learning objectives\nAt the end of this session, you should be able to answer the following questions and / or achieve the following learning objectives:\nüí° You can navigate directories using the command line. üí° You can use shortcuts like the tilde or dots to navigate your file system. üí° You can explain the difference between absolute and relative paths. üí° You can use arguments and flags to modify command-line commands. üí° You understand the concept of wild cards (*) and can use it for system navigation."
  },
  {
    "objectID": "sessions/session02.html#recipes-project",
    "href": "sessions/session02.html#recipes-project",
    "title": "Basics of the Command Line",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou used the command line to create a folder on your computer called recipes.\nYou used the command line to create a file called recipes.txt inside the recipes folder.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/session02.html#exercises",
    "href": "sessions/session02.html#exercises",
    "title": "Basics of the Command Line",
    "section": "Exercises",
    "text": "Exercises\n\nNavigation and setup\nIdentify a folder on your computer where you (want to) keep course-related files. If you don‚Äôt have one, choose a suitable location in your file system. Navigate into the chosen location using the command line. Use the command line to display the path of your chosen directory. What is the output?\n\n\nCreating a folder and a file\nWithin your chosen folder, create a new subfolder and name it recipes. Navigate into the recipes folder. Create a new file and name it recipes.txt. Confirm the creation of the file by listing the contents of the recipes folder. Which commands did you use?\n\n\nWriting and opening files\nAdd the title ‚ÄúMy Favorite Recipes‚Äù to recipes.txt. Which command or method did you use?\n\n\nCreating multiple files\nGo back to your main course-related folder. Using the command line, create three new files: notes.txt, assignments.txt, and schedule.txt. Provide the command you used.\n\n\nWildcards\nUse a wildcard pattern to list all .txt files in your folder. Which command did you use?\n\n\nBonus question\nImagine, that you are in a folder containing multiple text files with various extensions, including .txt, .md, and .docx. You want to move all the .txt files to a subfolder named ‚Äútext_files‚Äù while keeping the other file types in the current directory. Write a series of command-line commands to accomplish this task, including creating the ‚Äútext_files‚Äù subdirectory. Explain each step in your solution."
  },
  {
    "objectID": "sessions/session02.html#solutions",
    "href": "sessions/session02.html#solutions",
    "title": "Basics of the Command Line",
    "section": "Solutions",
    "text": "Solutions\n\n\n\n\n\n\nSolution: Navigation and setup\n\n\n\n\n\nFor folder navigation, use cd. To display the contents of a folder, use ls. To display the path of the current working directory, use pwd.\nFor example, on macOS if you navigated to the Documents folder and used pwd, the path looks like this:\n\n/Users/myusername/Documents\n\n\n\n\n\n\n\n\n\n\nSolution: Creating a folder and a file\n\n\n\n\n\n\nCreate a folder called recipes:\n\n\nmkdir recipes\n\n\nNavigate into the recipes folder:\n\n\ncd recipes\n\n\nCreate a file and name it recipes.txt:\n\n\ntouch recipes.txt\n\n\nList the contents of the recipes folder:\n\n\nls\n\n\n\n\n\n\n\n\n\n\nSolution: Writing and opening files\n\n\n\n\n\nI added the title to recipes.txt by using the following command:\n\necho \"My Favorite Recipes\" &gt; recipes.txt\n\nThis command writes ‚ÄúMy Favorite Recipes‚Äù to the file, overwriting any existing content.\n\n\n\n\n\n\n\n\n\nSolution: Creating multiple files\n\n\n\n\n\n\ntouch notes.txt assignments.txt schedule.txt\n\n\n\n\n\n\n\n\n\n\nSolution: Wildcards\n\n\n\n\n\n\nls *.txt\n\n\n\n\n\n\n\n\n\n\nSolution: Bonus question\n\n\n\n\n\n\nCreating the ‚Äútext_files‚Äù subfolder:\n\n\nmkdir text_files\n\n\nMoving all the .txt files to the ‚Äútext_files‚Äù subfolder:\n\n\nmv *.txt text_files"
  },
  {
    "objectID": "sessions/session02.html#slides",
    "href": "sessions/session02.html#slides",
    "title": "Basics of the Command Line",
    "section": "Slides",
    "text": "Slides\n\n\n\n\n\n\n\nHow can I download the slides as a PDF file?\n\n\n\n\n\nTo export the slides to PDF, do the following:\n\nToggle into Print View using the E key (or using the Navigation Menu).\nOpen the in-browser print dialog (CTRL/CMD+P).\nChange the Destination setting to Save as PDF.\nChange the Layout to Landscape.\nChange the Margins to None.\nEnable the Background graphics option.\nClick Save.\n\nNote: This feature has been confirmed to work in Google Chrome, Chromium as well as in Firefox.\nHere‚Äôs what the Chrome print dialog would look like with these settings enabled:\n\nThese instructions were copied from the Quarto documentation (MIT License) and slightly modified."
  },
  {
    "objectID": "sessions/session02.html#cheatsheet",
    "href": "sessions/session02.html#cheatsheet",
    "title": "Basics of the Command Line",
    "section": "Cheatsheet",
    "text": "Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\npwd\nDisplays the path of the current working directory\n\n\ncd &lt;PATH&gt;\nChanges the current working directory to &lt;PATH&gt;\n\n\ncd ~\nChanges the current working directory to the user‚Äôs home directory\n\n\ncd ..\nMoves up one folder\n\n\ncd ../..\nMoves up two folders\n\n\nclear\nClears the contents of your command line window\n\n\nls\nLists files and folders in the current working directory\n\n\nls &lt;PATH&gt;\nLists files and folders in &lt;PATH&gt;\n\n\nls -a\nLists all files (including hidden files) in the current working directory\n\n\nls -alh\nLists all files in a long format that is easy to read for humans\n\n\n[Command] --help\nDisplays all possible flags for a specific command (on Windows)\n\n\nman [Command]\nDisplays all possible flags for a specific command (on macOS)\n\n\nmkdir &lt;FOLDER&gt;\nCreates a new folder called &lt;FOLDER&gt;\n\n\nmkdir &lt;FOLDER1&gt; &lt;FOLDER2&gt;\nCreates two separate folders called &lt;FOLDER1&gt; and &lt;FOLDER2&gt;\n\n\ntouch &lt;FILE&gt;\nCreates a new empty file called &lt;FILE&gt;\n\n\nopen &lt;FILE&gt;\nOpens the file called &lt;FILE&gt; (on macOS)\n\n\nstart &lt;FILE&gt;\nOpens the file called &lt;FILE&gt; (on Windows)\n\n\necho \"example text\" &gt;&gt; file.txt\nWrites ‚Äúexample text‚Äù into file.txt\n\n\ncat &lt;FILE&gt;\nDisplays the content of &lt;FILE&gt;\n\n\nmv FILE.txt &lt;FOLDER&gt;\nMove FILE.txt into &lt;FOLDER&gt;\n\n\nmv &lt;FOLDER_OLD&gt; &lt;FOLDER_NEW&gt;\nRenames &lt;FOLDER_OLD&gt; to &lt;FOLDER_NEW&gt;\n\n\nls -alh *.csv\nUses a wildcard to list all .csv files in the current working directory\n\n\nrm -r &lt;FOLDER&gt;\nRemoves the folder &lt;FOLDER&gt;\n\n\nhistory\nDisplay the command history of the current terminal session\n\n\nhistory &gt; history.txt\nSaves the entire command history to a file named history.txt (overwrites existing content in history.txt)\n\n\nhistory &gt;&gt; history.txt\nAdds the entire command history to the end of the file named history.txt\n\n\ntree\nDisplays a graphical representation of the directory structure\n\n\nwget &lt;URL&gt;\nDownloads a file from the specified  to the current directory"
  },
  {
    "objectID": "sessions/exercises/exercise-github-advanced.html",
    "href": "sessions/exercises/exercise-github-advanced.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "1. Public collaboration with pull requests (using a ‚Äúfork‚Äù)\n\nFind out what forking is\nFork the recipes repository of another course participant (ideally, someone who is not your partner from the previous exercise)\nCreate an Issue, suggesting a missing recipe\nCreate an Issue in your partner‚Äôs repository (maybe their repository is missing a great recipe?)\nRepeat the steps from the previous exercise using the forked repository:\n\nClone the forked repository into a sensible location\nCreate a new branch and create one or multiple commits ‚Äúfixing‚Äù the Issue that you opened\nPush your changes to GitHub\nCreate a pull request with your changes (hint: from the forked to the original repository) and refer to the Issue in your pull request\n\n\n\n\n2. Review pull requests in your repository\n\nView any pull requests that are created in your recipes repository.\nReview the changes made by the contributor in the pull request.\nIf needed, discuss additional changes with the contributor in the pull request.\nClose the pull request by merging the proposed changes.\n\n\n\nüöÄ Optional: Practice forking on GitHub\n\nRepeat the entire forking workflow (see task 1 above) with Lennart‚Äôs recipes repository. Find out about the contributing guidelines in Lennart‚Äôs repo and follow them when creating a new recipe."
  },
  {
    "objectID": "sessions/exercises/exercise-github-intro.html",
    "href": "sessions/exercises/exercise-github-intro.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "1. Upload and manage your repository on GitLab or GitHub\n\nConnect to MPIB GitLab or GitHub\n\nGenerate an SSH key and add it to GitHub or GitLab.\nUse the SSH key to authentication on GitHub or GitLab.\n\n\n\n‚ÄúPush‚Äù your repository\n\nCreate an empty internal repository on GitLab or private repository on GitHub.\nSet the remote URL for your local recipes Git repository.\nPush your main branch to GitLab or GitHub.\n\n\n\n\n2. ‚ÄúPrivate‚Äù collaboration with pull requests (using ‚ÄúGitHub Flow‚Äù)\n\nAdd your partner (desk neighbor) as a collaborator to your recipes repository.\nClone your partner‚Äôs repository.\nCreate a new branch in your partner‚Äôs repository.\nAdd and commit a recipe to your partner‚Äôs recipes.txt file.\nPush the changes on the new branch to GitLab / GitHub.\nCreate a Merge Request / Pull Request.\nReview and merge the PR your partner made in your repository.\nüöÄ Optional: Add additional changes on the branch pushed by your collaborator.\n\n\n\nüöÄ Optional: Create a README.md file\n\nNavigate to your repository on GitHub, click ‚ÄúAdd file‚Äù, and select ‚ÄúCreate new file‚Äù.\nName the file README.md, add a brief description of your project, and provide a commit message. Play around with Markdown syntax!\nClick the green ‚ÄúCommit new file‚Äù button to save the README.md file to the repository.\nPull the changes to your local repository.\n\n\n\nüöÄ Optional: Manage branches\n\nPush another branch (other than the default branch) with changes to MPIB GitLab or GitHub.\nDelete any unused or merged branches.\n\n\n\nüöÄ Optional: Clean up your repository on MPIB GitLab or GitHub\n\nDelete unnecessary files or add a new recipe directly on MPIB GitLab or GitHub.\nCommit changes on MPIB GitLab or GitHub with a message.\nPull the changes to your local repository.\n\n\n\nüöÄ Optional: Clone and sync your repo\n\nClone your repository from MPIB GitLab or GitHub to a different location on your computer.\nStage, commit and push changes in the new location (consider using a new branch).\nPull changes to the repository in the original location.\nDelete your newly cloned repository."
  },
  {
    "objectID": "sessions/exercises/exercise-tags-releases.html",
    "href": "sessions/exercises/exercise-tags-releases.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Create a tag and releases\n\nRead the Tags and Releases chapter\nCreate a tag marking your recipe repository version\nCreate a release of your ‚Äúfinished‚Äù repository on GitHub"
  },
  {
    "objectID": "sessions/session05.html",
    "href": "sessions/session05.html",
    "title": "Lunch Break",
    "section": "",
    "text": "In this session, you will work on the following tasks:\n\n Find food.\n Eat food.\n Relax and recharge.\n Have coffee?"
  },
  {
    "objectID": "sessions/session05.html#this-session",
    "href": "sessions/session05.html#this-session",
    "title": "Lunch Break",
    "section": "",
    "text": "In this session, you will work on the following tasks:\n\n Find food.\n Eat food.\n Relax and recharge.\n Have coffee?"
  },
  {
    "objectID": "sessions/session05.html#learning-objectives",
    "href": "sessions/session05.html#learning-objectives",
    "title": "Lunch Break",
    "section": "Learning objectives",
    "text": "Learning objectives\nüí° You appreciate that breaks are good for you! üí° You learn about today‚Äôs menu at the canteen. üí° You‚Äôve eaten but you are still hungry for more Git!"
  },
  {
    "objectID": "sessions/session05.html#recipes-project",
    "href": "sessions/session05.html#recipes-project",
    "title": "Lunch Break",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou found inspiration for a new recipe for your recipes repository."
  },
  {
    "objectID": "sessions/recipes/recipes-branches.html",
    "href": "sessions/recipes/recipes-branches.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "At the end of this session, you should have accomplished the following:\n\nYou created a new branch and merged changes toto your default branch.\nüöÄ Optional: You created and resolved a merge conflict.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/recipes/recipes-github-advanced.html",
    "href": "sessions/recipes/recipes-github-advanced.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "At the end of this session, you should have accomplished the following:\n\nYou forked a public / internal recipes repository of another course participant.\nYou opened an Issue in another repository.\nYou created a pull request with changes that ‚Äúfix‚Äù the Issue you opened.\nYou reviewed and merged a pull request to integrate new content from a partner.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/recipes/recipes-cli.html",
    "href": "sessions/recipes/recipes-cli.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "At the end of this session, you should have accomplished the following:\n\nYou used the command line to create a folder on your computer called recipes.\nYou used the command line to create a file called recipes.txt inside the recipes folder.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/tasks/tasks-template.html",
    "href": "sessions/tasks/tasks-template.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "In this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚Äú?meta:chapter-title‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/session04.html",
    "href": "sessions/session04.html",
    "title": "Branches",
    "section": "",
    "text": "Slides\n  \n  \n    \n     Chapter: Branches\n  \n  \n    \n     Quiz"
  },
  {
    "objectID": "sessions/session04.html#this-session",
    "href": "sessions/session04.html#this-session",
    "title": "Branches",
    "section": "This session",
    "text": "This session\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚ÄúBranches‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/session04.html#learning-objectives",
    "href": "sessions/session04.html#learning-objectives",
    "title": "Branches",
    "section": "Learning objectives",
    "text": "Learning objectives\nüí° You understand the purpose and benefits of using branches in Git. üí° You can create and switch between branches. üí° You can merge branches and resolve merge conflicts. üí° You can name at least three best practices when working with branches."
  },
  {
    "objectID": "sessions/session04.html#recipes-project",
    "href": "sessions/session04.html#recipes-project",
    "title": "Branches",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou created a new branch and merged changes toto your default branch.\nüöÄ Optional: You created and resolved a merge conflict.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/session04.html#exercises",
    "href": "sessions/session04.html#exercises",
    "title": "Branches",
    "section": "Exercises",
    "text": "Exercises\n\nBranches\n\nIf needed, navigate to the recipes repository using the command line.\nCreate a new branch called feature.\nSwitch to the new branch.\nAdd a new recipe to your recipes.txt file.\nStage and commit the changes to the recipes.txt file on the feature branch.\nView the contents of recipes.txt to verify your changes.\nSwitch back to the default branch (main or master).\nView the contents of recipes.txt again to confirm that the previous changes do not exist on the default branch.\nMerge the feature branch into your default branch.\nDelete the feature branch.\nView the contents of recipes.txt yet again to confirm that the previous changes have been merged into the default branch."
  },
  {
    "objectID": "sessions/session04.html#bonus-exercises",
    "href": "sessions/session04.html#bonus-exercises",
    "title": "Branches",
    "section": "üöÄ Bonus exercises",
    "text": "üöÄ Bonus exercises\n\nCreate and resolve a merge conflict\n\nDeliberately create a merge conflict by editing the same section of a file on two separate branches and attempting to merge them. An example can be found in the branches chapter.\nResolve the merge conflict.\nDelete the merged branch afterwards."
  },
  {
    "objectID": "sessions/session04.html#slides",
    "href": "sessions/session04.html#slides",
    "title": "Branches",
    "section": "Slides",
    "text": "Slides\n\n\n\n\n\n\n\nHow can I download the slides as a PDF file?\n\n\n\n\n\nTo export the slides to PDF, do the following:\n\nToggle into Print View using the E key (or using the Navigation Menu).\nOpen the in-browser print dialog (CTRL/CMD+P).\nChange the Destination setting to Save as PDF.\nChange the Layout to Landscape.\nChange the Margins to None.\nEnable the Background graphics option.\nClick Save.\n\nNote: This feature has been confirmed to work in Google Chrome, Chromium as well as in Firefox.\nHere‚Äôs what the Chrome print dialog would look like with these settings enabled:\n\nThese instructions were copied from the Quarto documentation (MIT License) and slightly modified."
  },
  {
    "objectID": "sessions/session04.html#cheatsheet",
    "href": "sessions/session04.html#cheatsheet",
    "title": "Branches",
    "section": "Cheatsheet",
    "text": "Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit branch\nLists / creates and deletes branches\n\n\ngit branch feature\nCreates the feature branch\n\n\ngit branch -d feature\nDeletes the feature branch\n\n\ngit switch\nSwitches between branches\n\n\ngit switch feature\nSwitches to the feature branch\n\n\ngit checkout\nSwitches between branches\n\n\ngit checkout -b feature\nCreates and switches to the feature branch\n\n\ngit merge\nMerges branches\n\n\ngit merge feature\nMerges the feature branch into the current branch\n\n\ngit merge --abort\nAborts a merge\n\n\ngit merge --squash\nSquaches commits on branch into a single commit and merge\n\n\ngit stash\nStaches changes for later use\n\n\ngit stash -m \"stashing message\"\nStashes changes and includes a message\n\n\ngit stash list\nShows stored stashes\n\n\ngit stash apply\nApplies the latest stash\n\n\ngit stash apply stash@{n}\nApplies a specific stash\n\n\ngit stash pop\nApplies the latest stash and removes it from stash list\n\n\ngit stash pop stash@{n}\nApplies a specific stash and removes it from stash list\n\n\ngit cherry-pick &lt;commithash&gt;\nApplies changes from &lt;commithash&gt;\n\n\ngit rebase\nDifferent way of integrating changes from two branches"
  },
  {
    "objectID": "resources.html#all",
    "href": "resources.html#all",
    "title": "Resources",
    "section": "All",
    "text": "All\n\n\n\n\n\ntitle\nauthors\nyear\nsource\nlicense\ncategory\n\n\n\n\nBecome a git guru\nAtlassian\nNA\nNA\nNA\nguide\n\n\nExperimentology - An Open Science Approach to Experimental Psychology Methods (Appendix A)\nMichael C. Frank et al.\n2023\n\n\nguide\n\n\nExperimentology - An Open Science Approach to Experimental Psychology Methods (Chapter 13 on Project Management)\nMichael C. Frank et al.\n2023\n\n\nguide\n\n\nRemoving sensitive data from a repository\nGitHub Team\n2023\n\n\narticle\n\n\n‚ÄúGit & GitHub‚Äù - Chapter in the R Packages Book (2nd edition)\nHadley Wickham & Jenny Bryan\n2023\n\n\nbook\n\n\nIntroduction to version control with Git\nCodeRefinery\n2022\n\n\nworkshop\n\n\nCollaborative distributed version control\nCodeRefinery\n2022\n\n\nworkshop\n\n\nUsing Git to Code, Collaborate and Share\nImperial College Research Computing Service\n2022\n\n\nguide\n\n\nOh Shit, Git!?!\nKatie Sylor-Miller\n2021\n\nNA\nwebsite\n\n\nData Science for Economists - Lecture 2: Version control with Git(Hub)\nGrant McDermott\n2021\n\n\nslides\n\n\nHappy Git and GitHub for the useR\nJennifer Bryan et al.\n2021\n\n\nbook\n\n\nThe Turing Way - Chapter on Version Control\nThe Turing Way Community\n2021\n\n\nguide\n\n\nReproducible Research Data and Project Management in R - Chapter on Version Control with Git\nAnna Krystalli\n2021\n\n\nguide\n\n\nThe Missing Semester of Your CS Education - Chapter on Version Control\nThe Missing Semester Team\n2020\n\nNA\nguide\n\n\nHow to Teach Git Commits & GitHub to Teenagers\nJeff Olson\n2020\nNA\nNA\narticle\n\n\nGit for Scientists\nMiles McBain\n2019\n\n\ncourse\n\n\nVersion Control with Git\nThe Carpentries\n2019\n\n\nguide\n\n\nExcuse Me, Do You Have a Moment to Talk About Version Control?\nJennifer Bryan\n2017\nNA\nNA\npaper\n\n\nA Quick Introduction to Version Control with Git and GitHub\nJohn D. Blischak et al.\n2016\nNA\n\npaper\n\n\nGit for Humans\nAlice Bartlett\n2016\nNA\nNA\nslides\n\n\nA Friendly Github Intro Workshop\nKirstie Whitaker\n2016\n\n\nworkshop\n\n\nPro Git (2nd edition)\nScott Chacon & Ben Straub\n2014\nNA\n\nbook\n\n\nHow to Write a Git Commit Message\ncbeams\n2014\nNA\nNA\narticle"
  },
  {
    "objectID": "resources.html#guides",
    "href": "resources.html#guides",
    "title": "Resources",
    "section": "Guides",
    "text": "Guides\nTBA"
  },
  {
    "objectID": "resources.html#courses",
    "href": "resources.html#courses",
    "title": "Resources",
    "section": "Courses",
    "text": "Courses\nTBA"
  },
  {
    "objectID": "resources.html#papers",
    "href": "resources.html#papers",
    "title": "Resources",
    "section": "Papers",
    "text": "Papers\nTBA"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Track, organize and share your work: An introduction to Git for research",
    "section": "",
    "text": "Welcome!\nThis is the website for the full-day course ‚ÄúTrack, organize and share your work: An introduction to Git for research‚Äù at the General Psychology Lab at the University of Hamburg, instructed by Dr.¬†Lennart Wittkuhn.\n\n What? A full-day course on version control with Git\n When? Friday, September 27th 2024, 9:30 to 15:30\n Where? General Psychology Lab at the University of Hamburg (Room 4054 / William-Stern-Room)\n Who? Researchers at the General Psychology Lab at the University of Hamburg\n\n Code? Find all source code on GitHub!\n Bug? Open an issue or send an email!\n Questions? Open an issue or send an email!\n\n\nThe illustration on this website is created by Scriberia with The Turing Way community. Used under a CC-BY 4.0 licence. DOI: 10.5281/zenodo.3332807"
  },
  {
    "objectID": "code-of-conduct.html",
    "href": "code-of-conduct.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "During this course, we want to ensure a safe, productive, and welcoming environment for everyone who attends. All participants and speakers are expected to abide by this code of conduct. We do not tolerate any form of discrimination or harassment in any form or by any means. If you experience harassment or hear of any incidents of unacceptable behavior, please reach out to the course instructor, Dr.¬†Lennart Wittkuhn (lennart.wittkuhn@tutanota.com), so that we can take the appropriate action.\nUnacceptable behavior is defined as:\n\nHarassment, intimidation, or discrimination in any form, verbal abuse of any attendee, speaker, or other person. Examples include, but are not limited to, verbal comments related to gender, sexual orientation, disability, physical appearance, body size, race, religion, national origin, inappropriate use of nudity and/or sexual images in public spaces or in presentations, or threatening or stalking.\nDisruption of presentations throughout the course. We ask all participants to comply to the instructions of the speaker with regard to dedicated discussion space and time.\nParticipants should not take pictures of any activity in the course room without asking all involved participants for consent and receiving this consent.\n\nA first violation of this code of conduct will result in a warning, and subsequent violations by the same person can result in the immediate removal from the course without further warning. The organizers also reserve the right to prohibit attendance of excluded participants from similar future workshops, courses or meetings they organize."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "When? Friday, September 27th 2024, 9:30 to 15:30 (detailed schedule below)\n Where? General Psychology Lab at the University of Hamburg, Von-Melle-Park 5, 20146 Hamburg, Room 4054 / William-Stern-Room\n\n\n\n\n\nNo\nTime\nTitle\nContents\nReading\nSurvey/Quiz\n\n\n\n\n1\n9:30 - 10:00\nWelcome & Introduction to Version Control\nLogistics and course adminResults of course surveyIntroduction to Version ControlIntroduction to Git\n Introduction to Version Control\nCourse survey\n\n\n2\n10:00 - 10:45\nBasics of the Command Line\nFile systems and navigationBenefits of the command lineBasic command line commands\n Command Line\nCommand Line Quiz\n\n\n3\n10:45 - 11:30\nSetup & First steps with Git\nConfiguration and setup of GitInitializing a Git repositoryFundamental Git commands\n Setup, First steps with Git\nGit Basics Quiz\n\n\n4\n11:30 - 12:15\nBranches, Merging & Merge Conflicts\nUnderstanding branches in GitCreating and switching between branchesMerging branchesResolving merge conflicts\n Branches\nGit Branches Quiz\n\n\n5\n12:30 - 13:30\nLunch Break\nEnjoy your lunch!\n\n\n\n\n6\n13:30 - 14:15\nIntegration with GitLab / GitHub\nIntroduction to remote repositoriesCreating and managing repositories on GitLab / GitHubPushing and pulling changesCloning a remote repository\n Remotes Intro\nGitHub Quiz\n\n\n7\n14:15 - 15:00\nCollaboration on GitLab / GitHub\nForkingCollaboration with GitHub FlowPull / Merge RequestsIssuesREADME files\n GitHub Advanced, GitHub Issues\nGitHub Quiz\n\n\n8\n15:00 - 15:30\nSummary & Outlook\nSummary of course contentsOutlook to more Git topicsDiscussing open questions"
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "Acknowledgements & Attribution",
    "section": "",
    "text": "This project is currently funded by the Federal Ministry of Education and Research (BMBF) and the Free and Hanseatic City of Hamburg under the Excellence Strategy of the Federal Government and the L√§nder as part of the International Teaching and Learning Formats (ILLF@home) program at University of Hamburg. Our ILLF@home project proposal can be found here.\nThe project was previously funded by the Digital and Data Literacy in Teaching Lab (DDLitLab), an initiative by the ISA-Zentrum at the University of Hamburg. The Digital and Data Literacy in Teaching Lab program is in turn funded by the Stiftung Innovation in der Hochschullehre (details can be found here). Our DDLitLab project proposal can be found here (in German). Special thanks to Carolin Scharfenberg as well as Moritz Kreinsen and S√∂ren-Kristian Berger for help with project coordination, administration, and the grant application process."
  },
  {
    "objectID": "acknowledgements.html#funding",
    "href": "acknowledgements.html#funding",
    "title": "Acknowledgements & Attribution",
    "section": "",
    "text": "This project is currently funded by the Federal Ministry of Education and Research (BMBF) and the Free and Hanseatic City of Hamburg under the Excellence Strategy of the Federal Government and the L√§nder as part of the International Teaching and Learning Formats (ILLF@home) program at University of Hamburg. Our ILLF@home project proposal can be found here.\nThe project was previously funded by the Digital and Data Literacy in Teaching Lab (DDLitLab), an initiative by the ISA-Zentrum at the University of Hamburg. The Digital and Data Literacy in Teaching Lab program is in turn funded by the Stiftung Innovation in der Hochschullehre (details can be found here). Our DDLitLab project proposal can be found here (in German). Special thanks to Carolin Scharfenberg as well as Moritz Kreinsen and S√∂ren-Kristian Berger for help with project coordination, administration, and the grant application process."
  },
  {
    "objectID": "acknowledgements.html#website",
    "href": "acknowledgements.html#website",
    "title": "Acknowledgements & Attribution",
    "section": "Website",
    "text": "Website\n\nCode\nThis website is made with üñ§ and Quarto.\nThe source code for this website can be found on GitHub .\n\n\nImages\nImages are stored on Nextcloud (UHH Cloud). They can be retrieved using make download-images.\n\n\nClick here to view the full Makefile of this project.\n\n\n\n\nMakefile\n\nIMAGES_URL=https://cloud.uni-hamburg.de/s/ZndexSjSH9ZqxTG/download\nIMAGES_ARCHIVE=version-control-course.zip\nIMAGES_DIR=images/\nCHEATSHEET_URL=https://raw.githubusercontent.com/lnnrtwttkhn/version-control-book/main/cheatsheet.json\n\n.PHONY: preview\npreview:\n    quarto preview\n\n.PHONY: render\nrender: clean images\n    quarto render\n\n.PHONY: deploy\ndeploy: clean images\n    quarto publish gh-pages\n\n.PHONY: images\nimages:\n    wget $(IMAGES_URL) -O $(IMAGES_ARCHIVE)\n    unzip -j -o $(IMAGES_ARCHIVE) -d $(IMAGES_DIR)\n    rm -f $(IMAGES_ARCHIVE)\n\n.PHONY: objectives\nobjectives: objectives.txt\n    rm -rf ./objectives\n    mkdir -p objectives\n    wget -P ./objectives -i objectives.txt  \n\n.PHONY: exercises\nexercises: exercises.txt\n    rm -rf ./exercises\n    mkdir -p exercises\n    wget -P ./exercises -i exercises.txt \n\n.PHONY: cheatsheet\ncheatsheet:\n    rm -rf cheatsheet.json\n    wget $(CHEATSHEET_URL)\n\n.PHONY: clean\nclean:\n    rm -rf _site $(IMAGES_DIR)*\n\n\n\nThe illustration on the homepage is an illustration created by Scriberia with The Turing Way community. It is used under a CC-BY 4.0 licence. DOI: 10.5281/zenodo.3332807.\n\n\nFont\nThis website uses the Atkinson Hyperlegible font. Copyright ¬© 2020, Braille Institute of America, Inc., https://www.brailleinstitute.org/freefont with Reserved Typeface Name Atkinson Hyperlegible Font. Details of the license can be found here.\n\n\nAnalytics\nWe use Plausible for website analytics. Plausible is an ‚Äúintuitive, lightweight and open source web analytics‚Äù, does not use cookies and is fully compliant with GDPR, CCPA and PECR.\n\n\nLicense\nAll contents are licensed under CC BY-SA 4.0, unless indicated otherwise.\n\n\nContact\nDid you spot an error? Is there an issue with the website? Do you have feedback, questions or comments? We would love to hear from you! Open an issue on GitHub or write an email."
  },
  {
    "objectID": "sessions/tasks/tasks-intro.html",
    "href": "sessions/tasks/tasks-intro.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "In this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚Äú?meta:chapter-title‚Äù in the Version Control Book.\n Discussion: Discuss the learning objectives with your desk neighbor (quietly)."
  },
  {
    "objectID": "sessions/slides_session03.html#last-session-the-command-line-1",
    "href": "sessions/slides_session03.html#last-session-the-command-line-1",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Last session: The command line",
    "text": "Last session: The command line\n\nSource: Wikimedia Commons (free license)"
  },
  {
    "objectID": "sessions/slides_session03.html#last-session-learning-objectives",
    "href": "sessions/slides_session03.html#last-session-learning-objectives",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Last session: Learning objectives",
    "text": "Last session: Learning objectives\nAfter the last session, you should now be able to answer the following questions / do the following:\nüí° You can navigate directories using the command line. üí° You can use shortcuts like the tilde or dots to navigate your file system. üí° You can explain the difference between absolute and relative paths. üí° You can use arguments and flags to modify command-line commands. üí° You understand the concept of wild cards (*) and can use it for system navigation."
  },
  {
    "objectID": "sessions/slides_session03.html#last-session-recipes-project",
    "href": "sessions/slides_session03.html#last-session-recipes-project",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Last session: recipes project",
    "text": "Last session: recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou used the command line to create a folder on your computer called recipes.\nYou used the command line to create a file called recipes.txt inside the recipes folder.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/slides_session03.html#reading",
    "href": "sessions/slides_session03.html#reading",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Reading",
    "text": "Reading\n https://lennartwittkuhn.com/version-control-book/chapters/first-steps-git.html"
  },
  {
    "objectID": "sessions/slides_session03.html#learning-objectives",
    "href": "sessions/slides_session03.html#learning-objectives",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Learning objectives",
    "text": "Learning objectives\n\n\nSetup\nüí° You know how to set up Git for the first time üí° You have set up Git on your computer üí° You understand the difference between the three Git configuration levels üí° You know how to configure your username and email address in Git üí° You have set up your preferred text editor when working with Git üí° You can escape the command-line text editor Vim\n\n\n\nFirst steps with Git\nüí° You can initialize a Git repository üí° You can stage and commit changes\n\n\n\nüöÄ Optional: Git essentials\nüí° You know how to explore the commit history üí° You can compare different commits üí° You know how to use and create a .gitignore file üí° You can discuss which files can (not) be tracked well with Git and why üí° You know how to track empty folders in Git repositories"
  },
  {
    "objectID": "sessions/slides_session03.html#cheatsheet",
    "href": "sessions/slides_session03.html#cheatsheet",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Cheatsheet",
    "text": "Cheatsheet\nConfiguration\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit config\nGet an overview of Git config commands\n\n\ngit config --global \"user.name\"\nSets Git username\n\n\ngit config --global \"user.email\"\nSets Git email address\n\n\ngit config --global core.editor \"editorname\"\nSets Git text editor\n\n\ngit config --global init.defaultBranch main\nSets default branch name to main\n\n\ngit config --list\nViews set Git configurations\n\n\n\n\n\nGit Basics\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit init\nInitializes a folder as a Git repository\n\n\ngit status\nShows Git tracking status of files in the repository\n\n\ngit add\nAdds file(s) to the staging area\n\n\ngit commit\nCommits staged files\n\n\ngit commit -m \"commit message\"\nCommits staged files with a commit message"
  },
  {
    "objectID": "sessions/slides_session03.html#important-note-git-repository-in-user-folder",
    "href": "sessions/slides_session03.html#important-note-git-repository-in-user-folder",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Important note: Git repository in user folder?",
    "text": "Important note: Git repository in user folder?\n\n\nPlease make sure that your recipes folder is in a suitable place (for example, in the Desktop, Documents folders or where you keep your course-related files, ‚Ä¶) and not in your user directory!\nAlso: Always remember to cd into your repository before you execute Git commands!\nIf your recipes folder is in your user directory, please tell Lennart and we can fix it.\n\n\n\nTip: To prevent ever creating a Git repository inside your user folder, you can use:\n\n\n\n\n\nCode\n\ntouch ~/.git\n\n\n\n\n\n\nRunning git init in the user directory now results in a (desired) error:\n\n\n\n\nOutput\n\nfatal: invalid gitfile format: /Users/user/.git\n\n\n\nThanks to Eamon Caddigan for the idea!"
  },
  {
    "objectID": "sessions/slides_session03.html#tasks",
    "href": "sessions/slides_session03.html#tasks",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Tasks",
    "text": "Tasks\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapters ‚ÄúSetup‚Äù, ‚ÄúFirst steps with Git‚Äù and, optional, ‚ÄúGit Essentials‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/slides_session03.html#recipes-project",
    "href": "sessions/slides_session03.html#recipes-project",
    "title": "Session 3: Setup & First steps with Git",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou set up Git.\nYou initialized your recipes folder as a Git repository.\nYou committed your first recipe to the recipes repository.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/slides_session03.html#exercises",
    "href": "sessions/slides_session03.html#exercises",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Exercises",
    "text": "Exercises\nConfigure Git\n\nIf needed, navigate into the recipes folder using the command line.\nSet your Git username.\nSet your Git email address.\nChange the default name of the initial branch to main\nüöÄ Optional: Change your default text editor.\nList the Git configuration settings.\n\nInitialize a Git repository\n\nIf needed, navigate to the recipes folder using the command line.\nInitialize a new Git repository in the recipes folder.\n\nAdd content and commit changes\n\nCreate a new file called recipes.txt.\nAdd a short recipe to recipes.txt (any favorite or an intriguing AI-generated one).\nStage the new recipes.txt file.\nCommit the changes in recipes.txt with a descriptive commit message.\n\nüöÄ Optional: Commit at least three additional changes in recipes.txt."
  },
  {
    "objectID": "sessions/slides_session03.html#bonus-exercises",
    "href": "sessions/slides_session03.html#bonus-exercises",
    "title": "Session 3: Setup & First steps with Git",
    "section": "üöÄ Bonus exercises",
    "text": "üöÄ Bonus exercises\nAmend a commit\n\nIf needed, navigate into the recipes repository using cd recipes (or a similar path).\nMake additional changes to your recipes.txt file.\nStage the changes.\nAmend the previous commit to include the new changes.\nCheck the commit history to verify that the last commit message has not changed.\n\nFor example, add a recipe without a title first, commit, then add a title and amend the previous commit to add the title change to the same commit.\nCreate a .gitignore file\n\nIf needed, navigate into the recipes repository using cd recipes (or a similar path).\nAdd a random file to your repository that you want to ignore, for example an image file like image.jpg.\nCheck the state of your repository to confirm that Git noticed the added file.\nCreate a .gitignore file.\nAdd the random file to the .gitignore file.\nCheck the state of your repository again to confirm that Git now ignores the added file.\nStage the changes in your repository.\nCommit the .gitignore file using a descriptive commit message.\nüöÄ All macOS users: Let your repository ignore .DS_Store."
  },
  {
    "objectID": "sessions/slides_session03.html#solutions-setup",
    "href": "sessions/slides_session03.html#solutions-setup",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Solutions: Setup",
    "text": "Solutions: Setup\n\n\n\nCode\n\n#!/bin/bash\n\ncd recipes # &lt;1&gt;\ngit config --global user.name \"Your Name\" # &lt;2&gt;\ngit config --global user.email \"your.email@example.com\" # &lt;3&gt;\ngit config --global init.defaultBranch main # &lt;4&gt;\ngit config --global core.editor \"vim\" # &lt;5&gt;\ngit config --list # &lt;6&gt;\n\n\n\nOptional: Use cd recipes (or a similar path) to navigate into the recipes subfolder.\nSet your global Git username using git config --global user.name \"Your Name\". Replace Your Name with your name and don‚Äôt remove the quotation marks.\nSet your global Git email address using git config --global user.email \"your.email@example.com\". Replace your.email@example.com with your email address and don‚Äôt remove the quotation marks.\nChange the default name of the initial branch to main using git config --global init.defaultBranch main.\nOptional: Change your default text editor. In this example, the default text editor is changed to Vim using git config --global core.editor \"vim\".\nList the Git configuration."
  },
  {
    "objectID": "sessions/slides_session03.html#solutions-first-steps-with-git",
    "href": "sessions/slides_session03.html#solutions-first-steps-with-git",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Solutions: First steps with Git",
    "text": "Solutions: First steps with Git\n\n\n\nCode\n\n#!/bin/bash\n\ncd recipes # &lt;1&gt;\ngit init # &lt;2&gt;\ntouch recipes.txt # &lt;3&gt;\ncat &gt; recipes.txt &lt;&lt;- EOM # &lt;4&gt;\nPasta\n\n1. Bring water to the boil in a large saucepan.\n2. Once the water is boiling, add a good pinch of salt.\n3. Add the pasta.\n4. Cook the pasta according to packet instructions until it's \"al dente\".\n5. Drain the pasta in a colander.\nEOM\ngit add recipes.txt # &lt;5&gt;\ngit commit -m \"Add pasta recipe to recipes.txt\" # &lt;6&gt;\n\n\n\nIf needed, navigate into the recipes subfolder using cd recipes (or a similar path).\nInitialize a new Git repository in the recipes folder using git init.\nCreate a new file called recipes.txt using touch. Note that you can also use a regular text editor to do this.\nAdd a short recipe to recipes.txt. In this example, cat is used to add text to recipes.txt. This command would also create the file if recipes.txt wouldn‚Äôt exist yet. Note that you can also use a regular text editor to do this.\nStage the new recipes.txt file using git add.\nCommit the changes in recipes.txt with a descriptive commit message using git commit."
  },
  {
    "objectID": "sessions/slides_session03.html#solutions-amend-a-commit",
    "href": "sessions/slides_session03.html#solutions-amend-a-commit",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Solutions: Amend a commit",
    "text": "Solutions: Amend a commit\n\n\n\nCode\n\n#!/bin/bash\n\ncd recipes # &lt;1&gt;\necho \"6. Enjoy!\" &gt;&gt; recipes.txt # &lt;2&gt;\ngit add recipes.txt # &lt;3&gt;\ngit commit --amend --no-edit # &lt;4&gt;\ngit log --oneline # &lt;5&gt;\n\n\n\nOptional: Navigate into the recipes repository using cd recipes (or a similar path).\nMake an additional change to the recipes.txt file. In this example, echo is used to append text to recipes.txt. Note that you can also use a regular text editor to do this.\nStage the changes using git add.\nAmend the previous commit to include the new changes using git commit --amend. In this example, the --no-edit flag is used to amend the commit without changing the commit message.\nCheck the commit history using git log to verify that the last commit message has not changed. Here, we add the --oneline flag to show a concise summary of the past commits."
  },
  {
    "objectID": "sessions/slides_session03.html#solutions-create-a-.gitignore-file",
    "href": "sessions/slides_session03.html#solutions-create-a-.gitignore-file",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Solutions: Create a .gitignore file",
    "text": "Solutions: Create a .gitignore file\n\n\n\nCode\n\n#!/bin/bash\n\ncd recipes # &lt;1&gt;\nwget -nv -O pasta.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Rigatoni.jpg/320px-Rigatoni.jpg # &lt;2&gt;\ngit status # &lt;3&gt;\ntouch .gitignore # &lt;4&gt;\necho \"*.jpg\" &gt; .gitignore # &lt;5&gt;\ngit status # &lt;6&gt;\ngit add --all # &lt;7&gt;\ngit commit -m \"Add .gitignore and ignore all files that end with .jpg\" # &lt;8&gt;\necho \".DS_Store\" &gt;&gt; .gitignore # &lt;9&gt;\ngit add .gitignore # &lt;9&gt;\ngit commit -m \"Ignore .DS_Store\" # &lt;9&gt;\n\n\n\nNavigate into the recipes repository using cd recipes (or a similar path).\nDownload an image from the internet using wget. This command download a picture of pasta from the internet and saves the output -O as pasta.jpg. The -nv (or --no-verbose) argument makes the command output less text.\nCheck the state of your repository using git status. Git will notice the new file and list it as untracked.\nCreate a .gitignore file using touch. Note that you can also use a regular text editor to do this.\nAdd *.jpg to the .gitignore file to ignore all files that end with the .jpg file extension. In this example, echo is used to append text to recipes.txt. Note that you can also use a regular text editor to do this. This command would also create the file if .gitignore wouldn‚Äôt exist yet.\nCheck the state of your repository again using git status. The new file should disappear from the output and is not listed as untracked anymore.\nStage all changes using git add --all. This command should generally be avoided as it may lead to staging and committing changes that should not added to the repository‚Äôs history. Here, we use it to demonstrate that only the .gitignore will be staged but not the pasta image file because it is ignored.\nCommit the changes in .gitignore with a descriptive commit message using git commit.\nAdd .DS_Store to the .gitignore file to ignore it. Again, echo is used to append text to recipes.txt. Note that you can also use a regular text editor to do this. Stage and commit your changes using a descriptive commit message."
  },
  {
    "objectID": "sessions/slides_session03.html#staging-and-committing",
    "href": "sessions/slides_session03.html#staging-and-committing",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Staging and Committing",
    "text": "Staging and Committing\n\n\nStaging:\n\nCommand: git add\nPurpose: Preparing and organizing files before they are recorded in the repository‚Äôs history.\n\n\nCommitting:\n\nCommand: git commit -m \"commit message\"\nPurpose: Saving the changes in the staged files to the repository‚Äôs history, creating a snapshot.\n\n\n\n\n\n\n\n\n\nSource: git-scm.com\n\n\n\n\n\n\n\n\nSource: Heidi Seibold"
  },
  {
    "objectID": "sessions/slides_session03.html#git-log",
    "href": "sessions/slides_session03.html#git-log",
    "title": "Session 3: Setup & First steps with Git",
    "section": "git log",
    "text": "git log\n\ngit log\ne.g:\n\n\n\n\n\ncommit 3f6db14ed93d6e92a207a9a3ac5f8b8c5c5c5c34 (HEAD -&gt; main, origin/master, origin/HEAD)\nAuthor: Jane Doe &lt;jane@example.com&gt;\nDate:   Tue Apr 24 14:24:48 2024 -0700\n\n    Fix the widget rendering issue in the dashboard\n\ncommit a4324f44d3e85723a4d91cb9e07132b7115e4941\nAuthor: John Smith &lt;john@example.com&gt;\nDate:   Mon Apr 23 16:17:59 2024 -0700\n\n    Update dependencies to newer versions\n\ncommit fa204b9145bf7fc7ff226a26b49a567fc2eb1b94\nAuthor: Alice Johnson &lt;alice@example.com&gt;\nDate:   Sun Apr 22 15:08:43 2024 -0700\n\n    Initial commit of project files\n\n\n\n\ncommit b9690b287bdfec6e17af39b7337b84e9ebf6f046\nAuthor: Lennart Wittkuhn &lt;lennart.wittkuhn@tutanota.com&gt;\nDate:   Fri Mar 22 15:19:43 2024 +0100\n\n    move illustration of bad git commits (xkcd comic) and edit sentence\n\ncommit d8d770dd84cd19086f41d8d38752b223c8130859\nAuthor: konradpa &lt;konrad@pagenstedt.de&gt;\nDate:   Wed Mar 6 13:51:13 2024 +0100\n\n    add image to setup chapter\n\ncommit 074c9f6e12dd5fc8cc61de9f31efbdbce41a7583\nAuthor: konradpa &lt;konrad@pagenstedt.de&gt;\nDate:   Wed Mar 6 13:51:07 2024 +0100\n\n    add image to rewriting history chapter"
  },
  {
    "objectID": "sessions/slides_session03.html#saving-command-line-history",
    "href": "sessions/slides_session03.html#saving-command-line-history",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Saving command line history?",
    "text": "Saving command line history?\nUse this:\n\nhistory &gt; history.txt\n\n https://lennartwittkuhn.com/version-control-book/chapters/command-line.html#saving-command-line-history"
  },
  {
    "objectID": "sessions/slides_session03.html#commit-.gitignore",
    "href": "sessions/slides_session03.html#commit-.gitignore",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Commit .gitignore?",
    "text": "Commit .gitignore?\nYes, commit your project-specific .gitignore file.\n https://lennartwittkuhn.com/version-control-book/chapters/first-steps-git.html#ignoring-files-and-folders-.gitignore"
  },
  {
    "objectID": "sessions/slides_session03.html#best-practices-for-commit-messages",
    "href": "sessions/slides_session03.html#best-practices-for-commit-messages",
    "title": "Session 3: Setup & First steps with Git",
    "section": "Best practices for commit messages",
    "text": "Best practices for commit messages\n\n\n\n\n\nTry to keep commit messages short (less than 72 characters)\nUse present tense and start with an imperative verb to indicate the purpose of the commit, for example ‚Äúadd‚Äù, ‚Äúfix‚Äù, ‚Äúimprove‚Äù (as if you are giving orders to the codebase to change its behavior)\n\n\nIf applied, this commit will ‚Ä¶ [your commit message]\n\n\nTry to describe why a change is being made\nLink specific issues that are addressed by your commit\nUse the description for more explanation and context\n\n\n\n\nVersion Control Course"
  },
  {
    "objectID": "sessions/recipes/recipes-basics.html",
    "href": "sessions/recipes/recipes-basics.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "At the end of this session, you should have accomplished the following:\n\nYou set up Git.\nYou initialized your recipes folder as a Git repository.\nYou committed your first recipe to the recipes repository.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/recipes/recipes-github-intro.html",
    "href": "sessions/recipes/recipes-github-intro.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "At the end of this session, you should have accomplished the following:\n\nYou connected your GitHub account to your local Git.\nYou created a new GitHub repository and uploaded (i.e., ‚Äúpushed‚Äù) your recipes project.\nYou collaborated on a shared project by adding and committing changes to a partner‚Äôs repository.\n\n\nOptional:\n\nYou cleaned up your project by deleting unnecessary files and branches.\nYou created a short README.md file in your repository.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/index.html",
    "href": "sessions/index.html",
    "title": "Sessions",
    "section": "",
    "text": "Welcome & Introduction to Version Control\n\n\nSession 01\n\n\n\n\n\n\n09:30\n\n\n\n\n\n\n\n\nBasics of the Command Line\n\n\nSession 02\n\n\n\n\n\n\n10:00\n\n\n\n\n\n\n\n\nSetup & First steps with Git\n\n\nSession 03\n\n\n\n\n\n\n10:45\n\n\n\n\n\n\n\n\nBranches\n\n\nSession 04\n\n\n\n\n\n\n11:30\n\n\n\n\n\n\n\n\nLunch Break\n\n\nSession 05\n\n\n\n\n\n\n12:30\n\n\n\n\n\n\n\n\nIntegration with GitLab / GitHub\n\n\nSession 06\n\n\n\n\n\n\n13:30\n\n\n\n\n\n\n\n\nCollaboration on GitLab / GitHub\n\n\nSession 07\n\n\n\n\n\n\n14:15\n\n\n\n\n\n\n\n\nSummary & Outlook\n\n\nSession 08\n\n\n\n\n\n\n15:00\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "sessions/slides_session06.html#last-session-learning-objectives",
    "href": "sessions/slides_session06.html#last-session-learning-objectives",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Last session: Learning objectives",
    "text": "Last session: Learning objectives\nAfter the last session, you should now be able to answer the following questions / do the following:\nüí° You understand the purpose and benefits of using branches in Git. üí° You can create and switch between branches. üí° You can merge branches and resolve merge conflicts. üí° You can name at least three best practices when working with branches."
  },
  {
    "objectID": "sessions/slides_session06.html#last-session-recipes-project",
    "href": "sessions/slides_session06.html#last-session-recipes-project",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Last session: recipes project",
    "text": "Last session: recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou created a new branch and merged changes toto your default branch.\nüöÄ Optional: You created and resolved a merge conflict.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/slides_session06.html#meta-session-title",
    "href": "sessions/slides_session06.html#meta-session-title",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Integration with GitLab / GitHub",
    "text": "Integration with GitLab / GitHub\n\nImage from Techdobz"
  },
  {
    "objectID": "sessions/slides_session06.html#reading",
    "href": "sessions/slides_session06.html#reading",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Reading",
    "text": "Reading\n https://lennartwittkuhn.com/version-control-book/chapters/remotes-intro.html"
  },
  {
    "objectID": "sessions/slides_session06.html#learning-objectives",
    "href": "sessions/slides_session06.html#learning-objectives",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Learning objectives",
    "text": "Learning objectives\nüí° You can create a remote repository. üí° You can connect your local Git to a remote repository service. üí° You can pull and push changes to and from a remote repository. üí° You can clone a repository from a remote repository service."
  },
  {
    "objectID": "sessions/slides_session06.html#cheatsheet",
    "href": "sessions/slides_session06.html#cheatsheet",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Cheatsheet",
    "text": "Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit remote\nManages remote repositories\n\n\ngit clone\nCreates a local copy of a repository\n\n\ngit pull\nFetches and merges the latest changes from a remote repository into the current branch\n\n\ngit fetch\nUpdates remote tracking branches\n\n\ngit push\nUploads local commits to a remote repository"
  },
  {
    "objectID": "sessions/slides_session06.html#tasks",
    "href": "sessions/slides_session06.html#tasks",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Tasks",
    "text": "Tasks\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚ÄúRemotes - Introduction‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/slides_session06.html#recipes-project",
    "href": "sessions/slides_session06.html#recipes-project",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou connected your GitHub account to your local Git.\nYou created a new GitHub repository and uploaded (i.e., ‚Äúpushed‚Äù) your recipes project.\nYou collaborated on a shared project by adding and committing changes to a partner‚Äôs repository.\n\nOptional:\n\nYou cleaned up your project by deleting unnecessary files and branches.\nYou created a short README.md file in your repository.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/slides_session06.html#exercises-1",
    "href": "sessions/slides_session06.html#exercises-1",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Exercises 1",
    "text": "Exercises 1\nConnect to remote repositories using SSH\n\nGenerate an SSH key.\nCopy the SSH key to your clipboard.\nAdd the SSH key to the remote repository (for example, GitHub or GitLab).\n\nUpload your local repository to a remote repository\n\nCreate an empty repository on the remote repository hosting platform, for example GitHub or GitLab. Make sure to not initialize the repository with any files!\nIf needed, navigate to the recipes repository using the command line.\nSet the remote URL of your local repository to your remote repository.\nPush the changes on your main branch to your remote repository."
  },
  {
    "objectID": "sessions/slides_session06.html#exercises-2",
    "href": "sessions/slides_session06.html#exercises-2",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Exercises 2",
    "text": "Exercises 2\n‚ÄúPrivate‚Äù collaboration with pull requests (using GitHub Flow)\n\nAdd your exercise partner as a collaborator to your recipes repository.\nClone your partner‚Äôs repository.\nCreate a new branch in your collaborator‚Äôs repository.\nAdd a recipe to your collaborator‚Äôs recipes.txt file.\nAdd and commit the changes.\nPush the changes on the new branch to the remote repository.\nCreate a Pull / Merge Request.\nReview the PR your collaborator made in your repository.\nüöÄ Optional: Add additional changes on the branch pushed by your collaborator.\nMerge the PR into your repository."
  },
  {
    "objectID": "sessions/slides_session06.html#bonus-exercises",
    "href": "sessions/slides_session06.html#bonus-exercises",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "üöÄ Bonus exercises",
    "text": "üöÄ Bonus exercises\nAdd a README.md\n\nFind the option to create a new file on your remote repository in the browser.\nName the file README.md, add a brief description, and provide a commit message.\nüöÄ Optional: Play around with Markdown syntax.\nSave the README.md file to the repository.\nPull the changes to your local repository.\n\nClone and sync your repository\n\nMove to a location on your computer where you want to clone a repository.\nClone your remote repository to a different location on your computer.\nStage and commit changes in the new location (consider using a new branch).\nPush these new changes to GitHub.\nPull the changes to the repository in the original location.\nDelete your newly cloned repository."
  },
  {
    "objectID": "sessions/slides_session06.html#solutions",
    "href": "sessions/slides_session06.html#solutions",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Solutions",
    "text": "Solutions\nConnect to remote repositories using SSH\n\n\n\nCode\n\n#!/bin/bash\n\nssh-keygen -t ed25519 -C \"your_email@example.com\" # &lt;1&gt;\ncat ~/.ssh/id_ed25519.pub # &lt;2&gt;\n# Copy the SSh key to your account # &lt;3&gt;\n\n\n\nIn the command line, create a new SSH key. Make sure to change the example email to your email address. Optionally, provide a passphrase.\nCopy the SSH key to your clipboard. Here, we use cat to print the contents of the SSH key to the command line. Copy the contents displayed in the Terminal to your clipboard.\nAdd the SSH key to your remote repository account."
  },
  {
    "objectID": "sessions/slides_session06.html#solutions-1",
    "href": "sessions/slides_session06.html#solutions-1",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Solutions",
    "text": "Solutions\nUpload your local repository to a remote repository\n\n\n\nCode\n\n#!/bin/bash\n\n# create an empty remote repository # &lt;1&gt;\ncd recipes # &lt;2&gt;\ngit remote add origin https://github.com/your-username/your-repo-name.git # &lt;3&gt;\ngit push -u origin main # &lt;4&gt;\n\n\n\nTo create an empty repository on GitHub: (1) Go to GitHub and click the + icon in the upper-right corner, then select New repository. (2) Name your repository. (3) Do not select Initialize this repository with a README. (4) Click Create repository.\nOptional: Navigate into the recipes repository using cd (or a similar path).\nSet the remote URL of the local repository to the repository using git remote add origin &lt;URL&gt;. Remember to use the correct &lt;URL&gt; depending on whether you authentication method (typically SSH or PAT).\nPush the changes on the main branch to the remote repository using git push -u origin main."
  },
  {
    "objectID": "sessions/slides_session06.html#solutions-2",
    "href": "sessions/slides_session06.html#solutions-2",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Solutions",
    "text": "Solutions\n‚ÄúPrivate‚Äù collaboration with pull requests (using GitHub Flow)\n\n\n\nCode\n\n#!/bin/bash\n\n# Add your exercise partner as a collaborator to your recipes repository # &lt;1&gt;\ncd ~ # &lt;2&gt;\ngit clone https://github.com/partner-username/partner-repo-name.git  # &lt;3&gt;\ngit checkout -b new-branch-name # &lt;4&gt;\necho \"New Recipe\" &gt;&gt; recipes.txt # &lt;5&gt;\ngit add recipes.txt  # &lt;6&gt;\ngit commit -m \"Add new recipe to recipes.txt\" # &lt;6&gt;\ngit push origin new-branch-name # &lt;7&gt;\n# Create a Pull / Merge Request. # &lt;8&gt;\n# Review the PR your partner made in your repository. # &lt;9&gt;\n# Merge the PR into your repository. # &lt;10&gt;\n\n\n\nAdd your exercise partner as a collaborator to your recipes repository: (1) Go to your repository on GitHub. (2) Click on Settings. (2) Click on Manage access in the left sidebar. (3) Click Invite a collaborator and enter your partner‚Äôs GitHub username.\nMove to the location on your computer where you would like to clone your partner‚Äôs repository into, using cd in the command line. Here, we cd into the user‚Äôs home directory (~).\nClone your partner‚Äôs repository using git clone. Make sure that you not cloning into an existing repository.\nCreate a new branch in your partner‚Äôs repository.\nAdd a recipe to your partner‚Äôs recipes.txt file.\nAdd and commit the changes using a descriptive commit message.\nPush the changes on the new branch to GitHub.\nCreate a Pull Request: (1) Go to your partner‚Äôs repository on GitHub. (2) Click Compare & pull request for your branch. (3) Provide a title and description, then click Create pull request.\nReview the PR your partner made in your repository: (19) Go to your repository on GitHub. (2) Click on the Pull requests tab. (3) Click on the PR made by your partner. (4) Review the changes and provide feedback.\nMerge the PR into your repository: (1) After reviewing, click the green Merge pull request button. (2) Click Confirm merge."
  },
  {
    "objectID": "sessions/slides_session06.html#solutions-3",
    "href": "sessions/slides_session06.html#solutions-3",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Solutions",
    "text": "Solutions\nAdd a README.md\n\nIn your browser, go to your remote repository (for example, on GitHub), click Add file, and select Create new file.\nName the file README.md. Add a brief description of your project. Provide a descriptive commit message at the bottom.\nPlay around with Markdown syntax\nClick the green Commit new file button to save the README.md file to the repository.\nUse git pull origin main to pull the changes to your local repository."
  },
  {
    "objectID": "sessions/slides_session06.html#solutions-4",
    "href": "sessions/slides_session06.html#solutions-4",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Solutions",
    "text": "Solutions\nClone and sync your repository\n\n\n\nCode\n\n#!/bin/bash\n\ncd /new/location/for/repo # &lt;1&gt;\ngit clone https://github.com/your-username/your-repo-name.git /new/location/for/repo # &lt;2&gt;\ngit checkout -b new-branch # &lt;3&gt;\necho \"New Recipe\" &gt;&gt; recipes.txt # &lt;3&gt;\ngit add recipes.txt  # &lt;3&gt;\ngit commit -m \"Add new recipe to recipes.txt\" # &lt;3&gt;\ngit push -u origin new-branch # &lt;4&gt;\ncd /original/location/for/repo # &lt;5&gt;\ngit fetch # &lt;5&gt;\ngit switch new-branch # &lt;5&gt;\nrm -rf /new/location/for/repo # &lt;6&gt;\n\n\n\nMove to the location on your computer where you would like to clone your own repository into, using cd in the command line.\nClone your repository from GitHub to a different location on your computer.\nStage and commit changes in the new location (consider using a new branch).\nPush the new changes to GitHub.\nFetch these new changes to the repository in the original location.\nDelete your newly cloned repository."
  },
  {
    "objectID": "sessions/slides_session06.html#cloning",
    "href": "sessions/slides_session06.html#cloning",
    "title": "Session 6: Integration with GitLab / GitHub",
    "section": "Cloning",
    "text": "Cloning\n\n\nCloning\n\nRemember to clone a repo in a sensible location (not in your own repository)\nTo rename the cloned repo you can use: git clone &lt;URL&gt; new-folder-name\n\n\n\n\nVersion Control Course"
  },
  {
    "objectID": "sessions/exercises/exercise-branches.html",
    "href": "sessions/exercises/exercise-branches.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "1. Create and merge a branch\n\nCreate a new branch called feature.\nSwitch to the new branch.\nAdd a new recipe to your recipes.txt file.\nStage and commit the changes to your recipes.txt file on the feature branch.\nSwitch back to the default branch (main or master).\nMerge the feature branch with your default branch.\nDelete the feature branch.\n\n\n\n2. Create and resolve a merge conflict\n\nDeliberately create a merge conflict by editing the same section of a file on two separate branches and attempting to merge them. An example can be found in the Version Control Book chapter.\nResolve the merge conflict.\nDelete the feature branch afterwards."
  },
  {
    "objectID": "sessions/exercises/exercise-cli.html",
    "href": "sessions/exercises/exercise-cli.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Navigation and setup\nIdentify a folder on your computer where you (want to) keep course-related files. If you don‚Äôt have one, choose a suitable location in your file system. Navigate into the chosen location using the command line. Use the command line to display the path of your chosen directory. What is the output?\n\n\nCreating a folder and a file\nWithin your chosen folder, create a new subfolder and name it recipes. Navigate into the recipes folder. Create a new file and name it recipes.txt. Confirm the creation of the file by listing the contents of the recipes folder. Which commands did you use?\n\n\nWriting and opening files\nAdd the title ‚ÄúMy Favorite Recipes‚Äù to recipes.txt. Which command or method did you use?\n\n\nCreating multiple files\nGo back to your main course-related folder. Using the command line, create three new files: notes.txt, assignments.txt, and schedule.txt. Provide the command you used.\n\n\nWildcards\nUse a wildcard pattern to list all .txt files in your folder. Which command did you use?\n\n\nBonus question\nImagine, that you are in a folder containing multiple text files with various extensions, including .txt, .md, and .docx. You want to move all the .txt files to a subfolder named ‚Äútext_files‚Äù while keeping the other file types in the current directory. Write a series of command-line commands to accomplish this task, including creating the ‚Äútext_files‚Äù subdirectory. Explain each step in your solution."
  },
  {
    "objectID": "sessions/exercises/exercise-git-basics.html",
    "href": "sessions/exercises/exercise-git-basics.html",
    "title": "Version Control with Git",
    "section": "",
    "text": "Setup\n\nSet your Git username and email address.\nChange the default name of the initial ‚Äúbranch‚Äù to main.\nüöÄ Optional: Change your default text editor.\n\n\n\nFirst steps with Git\n\nCreate a recipes folder and turn it into a Git repository.\nAdd a short recipe to recipes.txt (any favorite or an intriguing AI-generated one).\nStage and commit your changes to the repository.\n\n\n\nBasic Git workflow\n\nCommit at least three additional changes in recipes.txt.\nCreate a .gitignore file\n\nEveryone: Create a random file that you want to ignore, for example random-file.docx.\nAdd the random file to the .gitignore file, stage and commit your changes.\nAll macOS users: Let your repository ignore .DS_Store.\n\nüöÄ Make at least one commit using git commit --amend.\n\nFor example, add a recipe without a title first, commit, then add a title and use git commit --amend to add the title change to the same commit.\n\nüöÄ Optional: Commit .gitkeep in an otherwise empty directory\n\nNote: There are several terms in these instructions that might still be unfamiliar to you, for example ‚Äúrepository‚Äù, ‚Äústage‚Äù or ‚Äúcommit‚Äù. Don‚Äôt worry, you will learn about what these terms mean in the chapters."
  },
  {
    "objectID": "sessions/slides_session07.html#last-session-learning-objectives",
    "href": "sessions/slides_session07.html#last-session-learning-objectives",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "Last session: Learning objectives",
    "text": "Last session: Learning objectives\nAfter the last session, you should now be able to answer the following questions / do the following:\nüí° You can create a remote repository. üí° You can connect your local Git to a remote repository service. üí° You can pull and push changes to and from a remote repository. üí° You can clone a repository from a remote repository service."
  },
  {
    "objectID": "sessions/slides_session07.html#last-session-recipes-project",
    "href": "sessions/slides_session07.html#last-session-recipes-project",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "Last session: recipes project",
    "text": "Last session: recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou connected your GitHub account to your local Git.\nYou created a new GitHub repository and uploaded (i.e., ‚Äúpushed‚Äù) your recipes project.\nYou collaborated on a shared project by adding and committing changes to a partner‚Äôs repository.\n\nOptional:\n\nYou cleaned up your project by deleting unnecessary files and branches.\nYou created a short README.md file in your repository.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/slides_session07.html#this-session-meta-session-title-1",
    "href": "sessions/slides_session07.html#this-session-meta-session-title-1",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "This session: Collaboration on GitLab / GitHub",
    "text": "This session: Collaboration on GitLab / GitHub\n\nImage from Techdobz"
  },
  {
    "objectID": "sessions/slides_session07.html#this-session-issues",
    "href": "sessions/slides_session07.html#this-session-issues",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "This session: Issues",
    "text": "This session: Issues\n\nLink to Issue"
  },
  {
    "objectID": "sessions/slides_session07.html#reading",
    "href": "sessions/slides_session07.html#reading",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "Reading",
    "text": "Reading\n https://lennartwittkuhn.com/version-control-book/chapters/github-advanced.html"
  },
  {
    "objectID": "sessions/slides_session07.html#learning-objectives",
    "href": "sessions/slides_session07.html#learning-objectives",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "Learning objectives",
    "text": "Learning objectives\nRemotes - Advanced\nüí° You can fork a repository. üí° You know the purpose and components of a Pull Request. üí° You can create a Pull Request from a forked repository. üí° You know how to collaborate using the popular workflow strategy GitHub flow. üí° You know the purpose and components of a README file. üí° You can protect your main branch.\nIssues\nüí° You understand the purpose of GitHub Issues. üí° You can create and manage Issues. üí° You can reference an Issue in another issue. üí° You can close an Issue with a commit or pull request."
  },
  {
    "objectID": "sessions/slides_session07.html#cheatsheet",
    "href": "sessions/slides_session07.html#cheatsheet",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "Cheatsheet",
    "text": "Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit remote\nManages remote repositories\n\n\ngit clone\nCreates a local copy of a repository\n\n\ngit pull\nFetches and merges the latest changes from a remote repository into the current branch\n\n\ngit fetch\nUpdates remote tracking branches\n\n\ngit push\nUploads local commits to a remote repository"
  },
  {
    "objectID": "sessions/slides_session07.html#github-flow",
    "href": "sessions/slides_session07.html#github-flow",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "GitHub Flow",
    "text": "GitHub Flow\n\n\n\n\nImage from Sebass van Boxel"
  },
  {
    "objectID": "sessions/slides_session07.html#tasks",
    "href": "sessions/slides_session07.html#tasks",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "Tasks",
    "text": "Tasks\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚ÄúGitHub - Advanced‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/slides_session07.html#recipes-project",
    "href": "sessions/slides_session07.html#recipes-project",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou forked a public / internal recipes repository of another course participant.\nYou opened an Issue in another repository.\nYou created a pull request with changes that ‚Äúfix‚Äù the Issue you opened.\nYou reviewed and merged a pull request to integrate new content from a partner.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/slides_session07.html#exercises",
    "href": "sessions/slides_session07.html#exercises",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "Exercises",
    "text": "Exercises\n\n\n‚ÄúPublic‚Äù collaboration with pull requests (using a fork and GitHub Flow)\n\nFind out what forking is.\nFork the recipes repository of another course participant (ideally someone who is not your collaborator from the previous exercise).\nCreate an Issue in your new collaborator‚Äôs repository (maybe their repository is missing a great recipe?).\nRepeat the steps from the exercise on collaboration with remote repositories using the forked repository:\n\nClone the forked repository into a sensible location on your computer.\nCreate a new branch and create one or multiple commits ‚Äúfixing‚Äù the Issue that you opened. If available, follow the contributing guide of your collaborator‚Äôs repository.\nPush your changes to the remote repository.\nCreate a pull / merge request with your changes (hint: from the forked to the original repository) and refer to the Issue in your pull / merge request.\n\n\n\n\n\nReviewing pull requests\n\nView any pull requests that are created in your recipes repository.\nReview the changes made by the contributor in the pull request.\nIf needed, discuss additional changes with the contributor in the pull request.\nClose the pull request by merging the proposed changes."
  },
  {
    "objectID": "sessions/slides_session07.html#bonus-exercises",
    "href": "sessions/slides_session07.html#bonus-exercises",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "üöÄ Bonus exercises",
    "text": "üöÄ Bonus exercises\n\nRepeat the entire forking workflow with Lennart‚Äôs recipes repository. Find out about the contributing guidelines in Lennart‚Äôs repo and follow them when creating a new recipe."
  },
  {
    "objectID": "sessions/slides_session07.html#solutions",
    "href": "sessions/slides_session07.html#solutions",
    "title": "Session 7: Collaboration on GitLab / GitHub",
    "section": "Solutions",
    "text": "Solutions\n\nForking is a process where you create a copy of someone else‚Äôs repository under your own account. It allows you to freely experiment with changes without affecting the original project.\nTo fork the recipes repository of another course participant: (1) Go to the GitHub repository you want to fork. (2) Click the Fork button at the top-right corner of the repository page. (3) Select your GitHub account to fork the repository.\nCreate an Issue, suggesting a missing recipe: (1) Go to the Issues tab of your partner‚Äôs repository on GitHub. (2) Click New issue. Provide a title and description for the Issue, suggesting a missing recipe. (3) Click Submit new issue.\nClone the forked repository into a sensible location on your computer.\n\n\n\n\nCode\n\ngit clone https://github.com/your-username/forked-repo-name.git /path/to/your/forked/directory\ncd /path/to/your/forked/directory\n\n\n\nCreate a new branch and create one or multiple commits ‚Äúfixing‚Äù the Issue that you opened.\n\n\n\n\nCode\n\ngit checkout -b issue-fix-branch\necho \"New Recipe Content\" &gt;&gt; recipes.txt\ngit add recipes.txt\ngit commit -m \"Add new recipe to fix #1\"\n\n\n\nPush your changes to the remote repository:\n\n\n\n\nCode\n\ngit push origin issue-fix-branch\n\n\n\nCreate a pull request with your changes (from the forked to the original repo) and refer to the issue in your pull request:\n\nGo to your forked repository in your browser.\nClick the Compare & pull request button.\nEnsure that the base repository is the original and the base branch is main.\nProvide a title and description for your pull request.\nRefer to the issue by adding Fixes #issue-number in the description.\nClick Create pull request.\nReview any pull requests in your repository.\n\n\n\n\nVersion Control Course"
  },
  {
    "objectID": "sessions/session06.html",
    "href": "sessions/session06.html",
    "title": "Integration with GitLab / GitHub",
    "section": "",
    "text": "Slides\n  \n  \n    \n     Chapter: Remotes - Introduction\n  \n  \n    \n     Quiz"
  },
  {
    "objectID": "sessions/session06.html#this-session",
    "href": "sessions/session06.html#this-session",
    "title": "Integration with GitLab / GitHub",
    "section": "This session",
    "text": "This session\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚ÄúRemotes - Introduction‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/session06.html#learning-objectives",
    "href": "sessions/session06.html#learning-objectives",
    "title": "Integration with GitLab / GitHub",
    "section": "Learning objectives",
    "text": "Learning objectives\nüí° You can create a remote repository. üí° You can connect your local Git to a remote repository service. üí° You can pull and push changes to and from a remote repository. üí° You can clone a repository from a remote repository service."
  },
  {
    "objectID": "sessions/session06.html#recipes-project",
    "href": "sessions/session06.html#recipes-project",
    "title": "Integration with GitLab / GitHub",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou connected your GitHub account to your local Git.\nYou created a new GitHub repository and uploaded (i.e., ‚Äúpushed‚Äù) your recipes project.\nYou collaborated on a shared project by adding and committing changes to a partner‚Äôs repository.\n\n\nOptional:\n\nYou cleaned up your project by deleting unnecessary files and branches.\nYou created a short README.md file in your repository.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/session06.html#exercises",
    "href": "sessions/session06.html#exercises",
    "title": "Integration with GitLab / GitHub",
    "section": "Exercises",
    "text": "Exercises\n\nConnect to remote repositories using SSH\n\nGenerate an SSH key.\nCopy the SSH key to your clipboard.\nAdd the SSH key to the remote repository (for example, GitHub or GitLab).\n\n\n\nUpload your local repository to a remote repository\n\nCreate an empty repository on the remote repository hosting platform, for example GitHub or GitLab. Make sure to not initialize the repository with any files!\nIf needed, navigate to the recipes repository using the command line.\nSet the remote URL of your local repository to your remote repository.\nPush the changes on your main branch to your remote repository.\n\n\n\n‚ÄúPrivate‚Äù collaboration with pull requests (using GitHub Flow)\n\nAdd your exercise partner as a collaborator to your recipes repository.\nClone your partner‚Äôs repository.\nCreate a new branch in your collaborator‚Äôs repository.\nAdd a recipe to your collaborator‚Äôs recipes.txt file.\nAdd and commit the changes.\nPush the changes on the new branch to the remote repository.\nCreate a Pull / Merge Request.\nReview the PR your collaborator made in your repository.\nüöÄ Optional: Add additional changes on the branch pushed by your collaborator.\nMerge the PR into your repository."
  },
  {
    "objectID": "sessions/session06.html#bonus-exercises",
    "href": "sessions/session06.html#bonus-exercises",
    "title": "Integration with GitLab / GitHub",
    "section": "üöÄ Bonus exercises",
    "text": "üöÄ Bonus exercises\n\nAdd a README.md\n\nFind the option to create a new file on your remote repository in the browser.\nName the file README.md, add a brief description, and provide a commit message.\nüöÄ Optional: Play around with Markdown syntax.\nSave the README.md file to the repository.\nPull the changes to your local repository.\n\n\n\nClone and sync your repository\n\nMove to a location on your computer where you want to clone a repository.\nClone your remote repository to a different location on your computer.\nStage and commit changes in the new location (consider using a new branch).\nPush these new changes to GitHub.\nPull the changes to the repository in the original location.\nDelete your newly cloned repository."
  },
  {
    "objectID": "sessions/session06.html#slides",
    "href": "sessions/session06.html#slides",
    "title": "Integration with GitLab / GitHub",
    "section": "Slides",
    "text": "Slides\n\n\n\n\n\n\n\nHow can I download the slides as a PDF file?\n\n\n\n\n\nTo export the slides to PDF, do the following:\n\nToggle into Print View using the E key (or using the Navigation Menu).\nOpen the in-browser print dialog (CTRL/CMD+P).\nChange the Destination setting to Save as PDF.\nChange the Layout to Landscape.\nChange the Margins to None.\nEnable the Background graphics option.\nClick Save.\n\nNote: This feature has been confirmed to work in Google Chrome, Chromium as well as in Firefox.\nHere‚Äôs what the Chrome print dialog would look like with these settings enabled:\n\nThese instructions were copied from the Quarto documentation (MIT License) and slightly modified."
  },
  {
    "objectID": "sessions/session06.html#cheatsheet",
    "href": "sessions/session06.html#cheatsheet",
    "title": "Integration with GitLab / GitHub",
    "section": "Cheatsheet",
    "text": "Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit remote\nManages remote repositories\n\n\ngit clone\nCreates a local copy of a repository\n\n\ngit pull\nFetches and merges the latest changes from a remote repository into the current branch\n\n\ngit fetch\nUpdates remote tracking branches\n\n\ngit push\nUploads local commits to a remote repository"
  },
  {
    "objectID": "sessions/slides_session04.html#last-session-learning-objectives",
    "href": "sessions/slides_session04.html#last-session-learning-objectives",
    "title": "Session 4: Branches",
    "section": "Last session: Learning objectives",
    "text": "Last session: Learning objectives\nAfter the last session, you should now be able to answer the following questions / do the following:\n\n\nSetup\nüí° You know how to set up Git for the first time üí° You have set up Git on your computer üí° You understand the difference between the three Git configuration levels üí° You know how to configure your username and email address in Git üí° You have set up your preferred text editor when working with Git üí° You can escape the command-line text editor Vim\n\n\n\nFirst steps with Git\nüí° You can initialize a Git repository üí° You can stage and commit changes\n\n\n\nüöÄ Optional: Git essentials\nüí° You know how to explore the commit history üí° You can compare different commits üí° You know how to use and create a .gitignore file üí° You can discuss which files can (not) be tracked well with Git and why üí° You know how to track empty folders in Git repositories"
  },
  {
    "objectID": "sessions/slides_session04.html#last-session-recipes-project",
    "href": "sessions/slides_session04.html#last-session-recipes-project",
    "title": "Session 4: Branches",
    "section": "Last session: recipes project",
    "text": "Last session: recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou set up Git.\nYou initialized your recipes folder as a Git repository.\nYou committed your first recipe to the recipes repository.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/slides_session04.html#meta-session-title",
    "href": "sessions/slides_session04.html#meta-session-title",
    "title": "Session 4: Branches",
    "section": "Branches",
    "text": "Branches\n\nFigure¬†1: Image from Chapter ‚ÄúGit Branches‚Äù of the ‚ÄúThe Turing Way handbook to reproducible, ethical and collaborative data science‚Äù, used under a Creative Commons Attribution 4.0 License."
  },
  {
    "objectID": "sessions/slides_session04.html#reading",
    "href": "sessions/slides_session04.html#reading",
    "title": "Session 4: Branches",
    "section": "Reading",
    "text": "Reading\n https://lennartwittkuhn.com/version-control-book/chapters/branches.html\n\n\nIllustration of branches in a Git repository. Each circle represents a commit. Commits on the Main branch are shown in gray. The branch Feature A (blue circles) was created from the Main branch and later merged again. In-between, another branch Feature A-1 was created from the Feature A branch (green circles) and merged with that branch again before the Feature A branch was eventually merged with the Main branch. The branch Feature B was created but abandoned and not merged with the Main branch."
  },
  {
    "objectID": "sessions/slides_session04.html#learning-objectives",
    "href": "sessions/slides_session04.html#learning-objectives",
    "title": "Session 4: Branches",
    "section": "Learning objectives",
    "text": "Learning objectives\nüí° You understand the purpose and benefits of using branches in Git. üí° You can create and switch between branches. üí° You can merge branches and resolve merge conflicts. üí° You can name at least three best practices when working with branches."
  },
  {
    "objectID": "sessions/slides_session04.html#cheatsheet",
    "href": "sessions/slides_session04.html#cheatsheet",
    "title": "Session 4: Branches",
    "section": "Cheatsheet",
    "text": "Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit branch\nLists / creates and deletes branches\n\n\ngit branch feature\nCreates the feature branch\n\n\ngit branch -d feature\nDeletes the feature branch\n\n\ngit switch\nSwitches between branches\n\n\ngit switch feature\nSwitches to the feature branch\n\n\ngit checkout\nSwitches between branches\n\n\ngit checkout -b feature\nCreates and switches to the feature branch\n\n\ngit merge\nMerges branches\n\n\ngit merge feature\nMerges the feature branch into the current branch\n\n\ngit merge --abort\nAborts a merge\n\n\ngit merge --squash\nSquaches commits on branch into a single commit and merge\n\n\ngit stash\nStaches changes for later use\n\n\ngit stash -m \"stashing message\"\nStashes changes and includes a message\n\n\ngit stash list\nShows stored stashes\n\n\ngit stash apply\nApplies the latest stash\n\n\ngit stash apply stash@{n}\nApplies a specific stash\n\n\ngit stash pop\nApplies the latest stash and removes it from stash list\n\n\ngit stash pop stash@{n}\nApplies a specific stash and removes it from stash list\n\n\ngit cherry-pick &lt;commithash&gt;\nApplies changes from &lt;commithash&gt;\n\n\ngit rebase\nDifferent way of integrating changes from two branches"
  },
  {
    "objectID": "sessions/slides_session04.html#tasks",
    "href": "sessions/slides_session04.html#tasks",
    "title": "Session 4: Branches",
    "section": "Tasks",
    "text": "Tasks\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚ÄúBranches‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/slides_session04.html#recipes-project",
    "href": "sessions/slides_session04.html#recipes-project",
    "title": "Session 4: Branches",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou created a new branch and merged changes toto your default branch.\nüöÄ Optional: You created and resolved a merge conflict.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/slides_session04.html#exercises",
    "href": "sessions/slides_session04.html#exercises",
    "title": "Session 4: Branches",
    "section": "Exercises",
    "text": "Exercises\n\nIf needed, navigate to the recipes repository using the command line.\nCreate a new branch called feature.\nSwitch to the new branch.\nAdd a new recipe to your recipes.txt file.\nStage and commit the changes to the recipes.txt file on the feature branch.\nView the contents of recipes.txt to verify your changes.\nSwitch back to the default branch (main or master).\nView the contents of recipes.txt again to confirm that the previous changes do not exist on the default branch.\nMerge the feature branch into your default branch.\nDelete the feature branch.\nView the contents of recipes.txt yet again to confirm that the previous changes have been merged into the default branch."
  },
  {
    "objectID": "sessions/slides_session04.html#exercises-1",
    "href": "sessions/slides_session04.html#exercises-1",
    "title": "Session 4: Branches",
    "section": "Exercises",
    "text": "Exercises\n\nIf needed, navigate to the recipes repository using the command line.\nCreate a new branch called feature.\nSwitch to the new branch.\nAdd a new recipe to your recipes.txt file.\nStage and commit the changes to the recipes.txt file on the feature branch.\nView the contents of recipes.txt to verify your changes.\nSwitch back to the default branch (main or master).\nView the contents of recipes.txt again to confirm that the previous changes do not exist on the default branch.\nMerge the feature branch into your default branch.\nDelete the feature branch.\nView the contents of recipes.txt yet again to confirm that the previous changes have been merged into the default branch."
  },
  {
    "objectID": "sessions/slides_session04.html#bonus-exercises",
    "href": "sessions/slides_session04.html#bonus-exercises",
    "title": "Session 4: Branches",
    "section": "üöÄ Bonus exercises",
    "text": "üöÄ Bonus exercises\nCreate and resolve a merge conflict\n\nDeliberately create a merge conflict by editing the same section of a file on two separate branches and attempting to merge them. An example can be found in the branches chapter.\nResolve the merge conflict.\nDelete the merged branch afterwards."
  },
  {
    "objectID": "sessions/slides_session04.html#solutions-branches",
    "href": "sessions/slides_session04.html#solutions-branches",
    "title": "Session 4: Branches",
    "section": "Solutions: Branches",
    "text": "Solutions: Branches\n\n\n\nCode\n\n#!/bin/bash\n\ncd recipes # &lt;1&gt;\ngit branch feature # &lt;2&gt;\ngit switch feature # &lt;3&gt;\ncat &gt;&gt; recipes.txt &lt;&lt;- EOM # &lt;4&gt;\n\nPotatoes\n\n1. Wash the potatoes and cut them into evenly sized chunks.\n2. Bring water to the boil in a large saucepan.\n3. Once the water is boiling, add a good pinch of salt.\n3. Add the potatoes.\n4. Cook the potatoes for 15 - 20 minutes or until fork-tender.\n5. Drain the pasta in a colander.\nEOM\ngit add recipes.txt # &lt;5&gt;\ngit commit -m \"Add potatoes recipe to recipes.txt\" # &lt;5&gt;\ncat recipes.txt # &lt;6&gt;\ngit checkout main # &lt;7&gt;\ncat recipes.txt # &lt;8&gt;\ngit merge feature # &lt;9&gt;\ngit branch -d feature # &lt;10&gt; \ncat recipes.txt # &lt;11&gt;\n\n\n\nOptional: Navigate into the recipes repository using cd (or a similar path).\nCreate a new branch called feature using git branch feature.\nSwitch to the new branch using git switch feature. You can also create and switch the branch in one step using git checkout -b feature.\nAdd a new recipe to your recipes.txt file. You can use your regular text editor. Here, we add a new recipe from the command line using cat.\nStage and commit the changes to recipes.txt using git add and git commit.\nView the contents of recipes.txt to verify your changes. Here, we use the cat command again.\nSwitch back to the default branch (main in this example). Here, we use git checkout main but you can also use git switch main.\nView the contents of recipes.txt again to confirm that the previous changes do not exist on the main branch.\nMerge the changes feature branch into the main branch.\nDelete the merged feature branch using git branch -d feature.\nView the contents of recipes.txt yet again to confirm that the previous changes have been merged into the main branch."
  },
  {
    "objectID": "sessions/slides_session04.html#solutions-merge-conflict",
    "href": "sessions/slides_session04.html#solutions-merge-conflict",
    "title": "Session 4: Branches",
    "section": "Solutions: Merge Conflict",
    "text": "Solutions: Merge Conflict\n\n\n\nCode\n\n#!/bin/bash\n\ncd recipes # &lt;1&gt;\ngit branch feature # &lt;2&gt;\ngit switch feature # &lt;3&gt;\ncat &gt;&gt; recipes.txt &lt;&lt;- EOM # &lt;4&gt;\n\nChocolate Cake\n\n1. Preheat the oven to 350¬∞F (175¬∞C).\n2. Mix flour, sugar, cocoa powder, baking powder, and salt in a bowl.\n3. Add eggs, milk, oil, and vanilla extract, and mix well.\n4. Pour the batter into a greased baking pan.\n5. Bake for 30-35 minutes.\n\nEOM\ngit add recipes.txt # &lt;5&gt;\ngit commit -m \"Add chocolate cake recipe to recipes.txt\" # &lt;5&gt;\ngit checkout main # &lt;6&gt;\ncat &gt;&gt; recipes.txt &lt;&lt;- EOM # &lt;7&gt;\n\nVanilla Cake\n\n1. Preheat the oven to 350¬∞F (175¬∞C).\n2. Mix flour, sugar, baking powder, and salt in a bowl.\n3. Add eggs, milk, oil, and vanilla extract, and mix well.\n4. Pour the batter into a greased baking pan. \n5. Bake for 25-30 minutes.\n\nEOM\n\ngit add recipes.txt # &lt;8&gt;\ngit commit -m \"Add vanilla cake recipe to recipes.txt\" # &lt;8&gt;\ngit merge feature # &lt;9&gt;\nsed -i '' -e '/^&lt;&lt;&lt;&lt;&lt;&lt;&lt; /d' -e '/^=======/d' -e '/^&gt;&gt;&gt;&gt;&gt;&gt;&gt; /d' recipes.txt # &lt;10&gt;\ngit add recipes.txt # &lt;11&gt;\ngit commit -m \"Resolve merge conflict by adding both chocolate and vanilla cake recipes\" # &lt;12&gt; \ngit branch -d feature # &lt;13&gt; \n\n\n\nNavigate into the recipes repository using cd (or a similar path).\nCreate a new branch called feature using git branch feature.\nSwitch to the new branch using git switch feature. You can also create and switch the branch in one step using git checkout -b feature.\nAdd a new recipe to your recipes.txt file using cat.\nStage and commit the changes to recipes.txt using git add and git commit.\nSwitch back to the default branch (main in this example) using git checkout main. You can also use git switch main.\nMake conflicting changes in the main branch to recipes.txt using cat.\nStage and commit the conflicting changes to recipes.txt using git add and git commit.\nAttempt to merge the feature branch with the default branch to create a merge conflict using git merge feature.\nResolve the merge conflict by editing recipes.txt. You can use a regular text editor to do this. In this example, we remove the conflict markers that Git added to recipes.txt using sed which results in keeping both recipes. This is not a recommended way to resolve merge conflicts and we only do it here to resolve the merge conflict without manual intervention. Merge conflicts usually always require manual resolution by the user.\nStage the resolved changes to recipes.txt using git add.\nCommit the resolved changes in recipes.txt with a descriptive commit message using git commit.\nDelete the merged feature branch using git branch -d feature.\n\n\n\nVersion Control Course"
  },
  {
    "objectID": "sessions/slides_session01.html#about",
    "href": "sessions/slides_session01.html#about",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "About",
    "text": "About\n\n\nMe\nüßë‚Äçüî¨ Position: Postdoctoral Researcher at the Institute of Psychology at the University of Hamburg\nüéì Education: BSc Psychology & MSc Cognitive Neuroscience (TU Dresden), PhD Cognitive Neuroscience (MPIB)\nüî¨ Research: I study the role of fast neural memory reactivation (‚Äúreplay‚Äù) in the human brain using fMRI\nüîó Contact: You can connect with me via email, Mastodon, GitHub or LinkedIn\n‚ÑπÔ∏è Info: Find out more about my work on my website, Google Scholar and ORCiD\n\n\n\nThis course\nüíª Materials: All materials are publicly available at https://lennartwittkuhn.com/version-control-course-uhh-2024/\nüì¶ Software: Reproducible materials are built with Quarto and deployed to GitHub Pages using GitHub Actions\n\n\n Source: Code is publicly available on GitHub at https://github.com/lnnrtwttkhn/version-control-course-uhh-2024/\nüôè Contact: I am happy for any feedback or suggestions via email or GitHub issues. Thank you!"
  },
  {
    "objectID": "sessions/slides_session01.html#who-are-you",
    "href": "sessions/slides_session01.html#who-are-you",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Who are you?",
    "text": "Who are you?\n\n\n\nYour name?\nYour preferred pronouns?\nYour research group?\nYour mood on a sheep scale?"
  },
  {
    "objectID": "sessions/slides_session01.html#course-overview",
    "href": "sessions/slides_session01.html#course-overview",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Course overview",
    "text": "Course overview\n\n\n\n Date: Friday, September 27th 2024\n Time: 9:30 to 15:30\n Room: Room 4054 / William-Stern-Room\n\n\n\n Instructor: Dr.¬†Lennart Wittkuhn\n Event: Course (full-day)\n Language: English"
  },
  {
    "objectID": "sessions/slides_session01.html#what-will-the-average-session-look-like",
    "href": "sessions/slides_session01.html#what-will-the-average-session-look-like",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "What will the average session look like?",
    "text": "What will the average session look like?\n\n The course will consist of 6 main sessions (ca. 45 - 60 minutes each)\n\n\n\n Demonstration (up to 15 minutes):  The instructor introduces the topic and gives a short demonstration of the main Git commands.\n\n\n\n\n Exercises (up to 45 minutes): Course participants work on hands-on exercises and assignments.\n\n\n\n\n Reading (in parallel to the exercises; up to 45 minutes):  Course participants engage with the online learning materials (aka. our ‚ÄúVersion Control Book‚Äù).\n\n\n\n\n Discussions (up to 10 minutes): Course participants and instructor collectively address any questions related to the session‚Äôs content.\n\n\n\n\n Quizzes (up to 10 minutes): Course participants complete online quizzes to test their knowledge."
  },
  {
    "objectID": "sessions/slides_session01.html#schedule",
    "href": "sessions/slides_session01.html#schedule",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\nNo\nTime\nTitle\nContents\nReading\nSurvey/Quiz\n\n\n\n\n1\n9:30 - 10:00\nWelcome & Introduction to Version Control\nLogistics and course adminResults of course surveyIntroduction to Version ControlIntroduction to Git\n Introduction to Version Control\nCourse survey\n\n\n2\n10:00 - 10:45\nBasics of the Command Line\nFile systems and navigationBenefits of the command lineBasic command line commands\n Command Line\nCommand Line Quiz\n\n\n3\n10:45 - 11:30\nSetup & First steps with Git\nConfiguration and setup of GitInitializing a Git repositoryFundamental Git commands\n Setup, First steps with Git\nGit Basics Quiz\n\n\n4\n11:30 - 12:15\nBranches, Merging & Merge Conflicts\nUnderstanding branches in GitCreating and switching between branchesMerging branchesResolving merge conflicts\n Branches\nGit Branches Quiz\n\n\n5\n12:30 - 13:30\nLunch Break\nEnjoy your lunch!\n\n\n\n\n6\n13:30 - 14:15\nIntegration with GitLab / GitHub\nIntroduction to remote repositoriesCreating and managing repositories on GitLab / GitHubPushing and pulling changesCloning a remote repository\n Remotes Intro\nGitHub Quiz\n\n\n7\n14:15 - 15:00\nCollaboration on GitLab / GitHub\nForkingCollaboration with GitHub FlowPull / Merge RequestsIssuesREADME files\n GitHub Advanced, GitHub Issues\nGitHub Quiz\n\n\n8\n15:00 - 15:30\nSummary & Outlook\nSummary of course contentsOutlook to more Git topicsDiscussing open questions"
  },
  {
    "objectID": "sessions/slides_session01.html#course-website",
    "href": "sessions/slides_session01.html#course-website",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Course website",
    "text": "Course website\n https://lennartwittkuhn.com/version-control-course-uhh-2024/\n\n\n\nCourse website is the main entry point for students before, during and after the course\nContents: Overview, course details, schedule, information about the team, additional resources and course mechanics\nPractical advantage: Update course information independently from university websites that are out of your control"
  },
  {
    "objectID": "sessions/slides_session01.html#version-control-book",
    "href": "sessions/slides_session01.html#version-control-book",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Version Control Book",
    "text": "Version Control Book\n https://lennartwittkuhn.com/version-control-book"
  },
  {
    "objectID": "sessions/slides_session01.html#quizzes-surveys",
    "href": "sessions/slides_session01.html#quizzes-surveys",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Quizzes & Surveys",
    "text": "Quizzes & Surveys\n\n\nWe use online surveys to ask you questions and implement exercises or quizzes\nImplemented in the formr survey framework (open-source, hosted in Germany)\n\n\n\n\nAnonymity & data usage\n\nall raw data are kept anonymous and will only be used for research and educational purposes\nif responses are shared as part of the course, they will be aggregated to ensure anonymity is maintained\nif you want your data to be deleted, send an email with your personal codeword to barbara.oberbauer@uni-hamburg.de. Your codeword is then forwarded to us (without your name) and your data deleted."
  },
  {
    "objectID": "sessions/slides_session01.html#cheatsheets",
    "href": "sessions/slides_session01.html#cheatsheets",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Cheatsheets",
    "text": "Cheatsheets\n\nEach session / chapter / slidedeck contains a cheatsheet with relevant commands.\nFor an overview of all cheatsheets, see https://lennartwittkuhn.com/version-control-book/misc/cheatsheet.html.\n\n\n\nExample cheatsheet: Basic Git commands\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit init\nInitializes a folder as a Git repository\n\n\ngit status\nShows Git tracking status of files in the repository\n\n\ngit add\nAdds file(s) to the staging area\n\n\ngit commit\nCommits staged files\n\n\ngit commit -m \"commit message\"\nCommits staged files with a commit message"
  },
  {
    "objectID": "sessions/slides_session01.html#pair-programming-variant",
    "href": "sessions/slides_session01.html#pair-programming-variant",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Pair Programming (variant)",
    "text": "Pair Programming (variant)\n\n\n\nFind and say hello to your nearest desk neighbor\nComplete the exercises together, help each other out, etc.\n\n\n\n\n\nThis illustration is created by Scriberia with The Turing Way community. Used under a CC-BY 4.0 licence. DOI: 10.5281/zenodo.3332807"
  },
  {
    "objectID": "sessions/slides_session01.html#course-exercise-building-an-online-recipes-book",
    "href": "sessions/slides_session01.html#course-exercise-building-an-online-recipes-book",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Course exercise: Building an online recipes book",
    "text": "Course exercise: Building an online recipes book\n https://lennartwittkuhn.com/recipes"
  },
  {
    "objectID": "sessions/slides_session01.html#code-of-conduct",
    "href": "sessions/slides_session01.html#code-of-conduct",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nDuring this course, we want to ensure a safe, productive, and welcoming environment for everyone who attends. All participants and speakers are expected to abide by this code of conduct. We do not tolerate any form of discrimination or harassment in any form or by any means. If you experience harassment or hear of any incidents of unacceptable behavior, please reach out to the course instructor, Dr.¬†Lennart Wittkuhn (lennart.wittkuhn@tutanota.com), so that we can take the appropriate action.\nUnacceptable behavior is defined as:\n\nHarassment, intimidation, or discrimination in any form, verbal abuse of any attendee, speaker, or other person. Examples include, but are not limited to, verbal comments related to gender, sexual orientation, disability, physical appearance, body size, race, religion, national origin, inappropriate use of nudity and/or sexual images in public spaces or in presentations, or threatening or stalking.\nDisruption of presentations throughout the course. We ask all participants to comply to the instructions of the speaker with regard to dedicated discussion space and time.\nParticipants should not take pictures of any activity in the course room without asking all involved participants for consent and receiving this consent.\n\nA first violation of this code of conduct will result in a warning, and subsequent violations by the same person can result in the immediate removal from the course without further warning. The organizers also reserve the right to prohibit attendance of excluded participants from similar future workshops, courses or meetings they organize."
  },
  {
    "objectID": "sessions/slides_session01.html#breaks",
    "href": "sessions/slides_session01.html#breaks",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Breaks",
    "text": "Breaks\n\nWe will have a one-hour lunch break at 1 p.m.\nFeel free to take short breaks in-between (sessions) when needed."
  },
  {
    "objectID": "sessions/slides_session01.html#lets-do-the-splits",
    "href": "sessions/slides_session01.html#lets-do-the-splits",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Let‚Äôs do the splits",
    "text": "Let‚Äôs do the splits"
  },
  {
    "objectID": "sessions/slides_session01.html#learning-objectives",
    "href": "sessions/slides_session01.html#learning-objectives",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Learning objectives",
    "text": "Learning objectives\nAt the end of this session, you should be able to answer the following questions and / or achieve the following learning objectives:\nüí° You know what version control is. üí° You can argue why version control is useful (for research). üí° You can name benefits of Git compared to other approaches to version control. üí° You can explain the difference between Git and GitHub."
  },
  {
    "objectID": "sessions/slides_session01.html#your-turn",
    "href": "sessions/slides_session01.html#your-turn",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Your turn",
    "text": "Your turn\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚ÄúIntroduction to Version Control‚Äù in the Version Control Book.\n Discussion: Discuss the learning objectives with your desk neighbor (quietly).\n\nLearning objectives\nüí° You know what version control is. üí° You can argue why version control is useful (for research). üí° You can name benefits of Git compared to other approaches to version control. üí° You can explain the difference between Git and GitHub."
  },
  {
    "objectID": "sessions/slides_session01.html#the-issue-of-computational-reproducibility-in-science",
    "href": "sessions/slides_session01.html#the-issue-of-computational-reproducibility-in-science",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "The issue of computational reproducibility in science",
    "text": "The issue of computational reproducibility in science\n\n\n\n‚Äú‚Ä¶ when the same analysis steps performed on the same dataset consistently produce the same answer.‚Äù 1\n\n\n\nby Scriberia for The Turing Way Community (2022) (Link, CC BY 4.0)\n\n\n\n\n\n\nThe problem\n\n\n\nabout more than half of research is not reproducible 2\n\nresearch data, code, software & materials are often not available ‚Äúupon reasonable [sic] request‚Äù\nif resources are shared, they are often incomplete\n\n90% of researchers: ‚Äúreproducibility crisis‚Äù (N = 1576) 3\n\n\n\n\nWhy?\n\n\n\ncomputational reproducibility is hard\nresearchers lack training\nincentives are not (yet) aligned 4\n‚Äúnatural selection of bad science‚Äù 5\n\n\n\n\n\n‚Äú‚Ä¶ accumulated evidence indicates [‚Ä¶] substantial room for improvement with regard to research practices to maximize the efficiency of the research community‚Äôs use of the public‚Äôs financial investment.‚Äù (Munaf√≤ et al., 2017)\n\n\nWe need a professional toolkit for digital research!\n\n\n\nalso called ‚Äúanalytical reproducibility‚Äù\nin contrast: ‚ÄúReplication‚Äù = same analysis on different data\ncomputational reproducibility should be a minimum requirement\n90% of respondents to a survey in Nature agreed that there is a ‚Äúreproducibility crisis‚Äù\nnon-scientist friends react very surprised at the lack of professionalization in science\nwe are currently violating the public‚Äôs trust = deep ethical problem\nnatural selection: as a researcher, what‚Äôs good for your career is not necessarily good for science (how to get funding, how to get published, how to get cited)\njournals are interested in selling us back our data, not improving the quality of science"
  },
  {
    "objectID": "sessions/slides_session01.html#why-we-need-version-control",
    "href": "sessions/slides_session01.html#why-we-need-version-control",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Why we need version control ‚Ä¶",
    "text": "Why we need version control ‚Ä¶\n\n\n\n‚Ä¶ for code (text files) \n\n\n\n‚Ä¶ for data (binary files) \n\n\nWhen everything is relevant ‚Ä¶\n\n\n‚Ä¶ track everything.\n\n\n\n\n\nVersion control is relevant for anyone who wants to track the evolution of digital objects\nCredit: Adapted from Slides on ‚ÄúResearch Data Management with DataLad‚Äù by Adina Wagner & Michael Hanke]"
  },
  {
    "objectID": "sessions/slides_session01.html#what-is-version-control",
    "href": "sessions/slides_session01.html#what-is-version-control",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "What is version control?",
    "text": "What is version control?\n\n‚ÄúVersion control is a systematic approach to record changes made in a [‚Ä¶] set of files, over time. This allows you and your collaborators to track the history, see what changed, and recall specific versions later [‚Ä¶]‚Äù (Turing Way)\n\n\n\n\n keep track of changes in a directory (a ‚Äúrepository‚Äù)\n take snapshots (‚Äúcommits‚Äù) of your repo at any time\n know the history: what was changed when by whom\n compare commits and go back to any previous state\n work on parallel ‚Äúbranches‚Äù & flexibly ‚Äúmerge‚Äù them\n\n\n\nby Scriberia for The Turing Way community (CC-BY 4.0)\n\n\n\n\n\n ‚Äúpush‚Äù your repo to a ‚Äúremote‚Äù location & share it\n  share repos on platforms like GitHub or GitLab\n work together on the same files at the same time\n others can read, copy, edit and suggest changes\n make your repo public and openly share your work\n\n\n\nby Scriberia for The Turing Way community (CC-BY 4.0)"
  },
  {
    "objectID": "sessions/slides_session01.html#what-is-git",
    "href": "sessions/slides_session01.html#what-is-git",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "What is Git?",
    "text": "What is Git?\n\n\n\n\n\ngit-scm.com\n\n\n\nmost popular version control system\nfree, open-source command-line tool\ngraphical user interfaces exist, e.g., GitKraken\nstandard tool for most (all?) software developers\n100 million GitHub users 6\n\n\n\n\n\nVersion control is relevant for anyone who wants to track the evolution of digital objects"
  },
  {
    "objectID": "sessions/slides_session01.html#goal",
    "href": "sessions/slides_session01.html#goal",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Goal",
    "text": "Goal\n\n\nFrom this ‚Ä¶\n\n\n\n\nTo this ‚Ä¶"
  },
  {
    "objectID": "sessions/slides_session01.html#schedule-1",
    "href": "sessions/slides_session01.html#schedule-1",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\nNo\nTime\nTitle\nContents\nReading\nSurvey/Quiz\n\n\n\n\n1\n9:30 - 10:00\nWelcome & Introduction to Version Control\nLogistics and course adminResults of course surveyIntroduction to Version ControlIntroduction to Git\n Introduction to Version Control\nCourse survey\n\n\n2\n10:00 - 10:45\nBasics of the Command Line\nFile systems and navigationBenefits of the command lineBasic command line commands\n Command Line\nCommand Line Quiz\n\n\n3\n10:45 - 11:30\nSetup & First steps with Git\nConfiguration and setup of GitInitializing a Git repositoryFundamental Git commands\n Setup, First steps with Git\nGit Basics Quiz\n\n\n4\n11:30 - 12:15\nBranches, Merging & Merge Conflicts\nUnderstanding branches in GitCreating and switching between branchesMerging branchesResolving merge conflicts\n Branches\nGit Branches Quiz\n\n\n5\n12:30 - 13:30\nLunch Break\nEnjoy your lunch!\n\n\n\n\n6\n13:30 - 14:15\nIntegration with GitLab / GitHub\nIntroduction to remote repositoriesCreating and managing repositories on GitLab / GitHubPushing and pulling changesCloning a remote repository\n Remotes Intro\nGitHub Quiz\n\n\n7\n14:15 - 15:00\nCollaboration on GitLab / GitHub\nForkingCollaboration with GitHub FlowPull / Merge RequestsIssuesREADME files\n GitHub Advanced, GitHub Issues\nGitHub Quiz\n\n\n8\n15:00 - 15:30\nSummary & Outlook\nSummary of course contentsOutlook to more Git topicsDiscussing open questions"
  },
  {
    "objectID": "sessions/slides_session01.html#next-session-the-command-line",
    "href": "sessions/slides_session01.html#next-session-the-command-line",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Next session: The command line",
    "text": "Next session: The command line\n\nSource: Wikimedia Commons (free license)"
  },
  {
    "objectID": "sessions/slides_session01.html#references",
    "href": "sessions/slides_session01.html#references",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "References",
    "text": "References\n\n\nBaker, M. (2016). 1,500 scientists lift the lid on reproducibility. Nature, 533(7604), 452‚Äì454. https://doi.org/10.1038/533452a.\n\n\nCr√ºwell, S., Apthorp, D., Baker, B. J., Colling, L., Elson, M., Geiger, S. J., Lobentanzer, S., Mon√©ger, J., Patterson, A., Schwarzkopf, D. S., Zaneva, M., & Brown, N. J. L. (2023). What‚Äôs in a Badge? A Computational Reproducibility Investigation of the Open Data Badge Policy in One Issue of Psychological Science. Psychological Science, 34(4), 512‚Äì522. https://doi.org/10.1177/09567976221140828.\n\n\nHardwicke, T. E., Bohn, M., MacDonald, K., Hembacher, E., Nuijten, M. B., Peloquin, B. N., deMayo, B. E., Long, B., Yoon, E. J., & Frank, M. C. (2021). Analytic reproducibility in articles receiving open data badges at the journal Psychological Science : an observational study. Royal Society Open Science, 8(1). https://doi.org/10.1098/rsos.201494.\n\n\nMunaf√≤, M. R., Nosek, B. A., Bishop, D. V. M., Button, K. S., Chambers, C. D., Percie du Sert, N., Simonsohn, U., Wagenmakers, E.-J., Ware, J. J., & Ioannidis, J. P. A. (2017). A manifesto for reproducible science. Nature Human Behaviour, 1(1). https://doi.org/10.1038/s41562-016-0021.\n\n\nObels, P., Lakens, D., Coles, N. A., Gottfried, J., & Green, S. A. (2020). Analysis of Open Data and Computational Reproducibility in Registered Reports in Psychology. Advances in Methods and Practices in Psychological Science, 3(2), 229‚Äì237. https://doi.org/10.1177/2515245920918872.\n\n\nPoldrack, R. A. (2019). The Costs of Reproducibility. Neuron, 101(1), 11‚Äì14. https://doi.org/10.1016/j.neuron.2018.11.030.\n\n\nSmaldino, P. E., & McElreath, R. (2016). The natural selection of bad science. Royal Society Open Science, 3(9), 160384. https://doi.org/10.1098/rsos.160384.\n\n\nThe Turing Way Community. (2022). The turing way: A handbook for reproducible, ethical and collaborative research. Zenodo. https://doi.org/10.5281/zenodo.3233853.\n\n\nWicherts, J. M., Borsboom, D., Kats, J., & Molenaar, D. (2006). The poor availability of psychological research data for reanalysis. American Psychologist, 61(7), 726‚Äì728. https://doi.org/10.1037/0003-066x.61.7.726.\n\n\n\n\nVersion Control Course"
  },
  {
    "objectID": "sessions/slides_session01.html#footnotes",
    "href": "sessions/slides_session01.html#footnotes",
    "title": "Session 1: Welcome & Introduction to Version Control",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe Turing Way Community (2022), see ‚ÄúGuide on Reproducible Research‚Äù\nfor example, in Psychology: Cr√ºwell et al. (2023); Hardwicke et al. (2021); Obels et al. (2020); Wicherts et al. (2006)\nsee Baker (2016), Nature\nsee e.g., Poldrack (2019)\nsee Smaldino & McElreath (2016)\n(Source: Wikipedia)\npull requests on GitHub, merge requests on GitLab"
  },
  {
    "objectID": "sessions/session01.html",
    "href": "sessions/session01.html",
    "title": "Welcome & Introduction to Version Control",
    "section": "",
    "text": "Slides\n  \n  \n    \n     Chapter\n  \n  \n    \n     Exercises"
  },
  {
    "objectID": "sessions/session01.html#this-session",
    "href": "sessions/session01.html#this-session",
    "title": "Welcome & Introduction to Version Control",
    "section": "This session",
    "text": "This session\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚ÄúIntroduction to Version Control‚Äù in the Version Control Book.\n Discussion: Discuss the learning objectives with your desk neighbor (quietly)."
  },
  {
    "objectID": "sessions/session01.html#learning-objectives",
    "href": "sessions/session01.html#learning-objectives",
    "title": "Welcome & Introduction to Version Control",
    "section": "Learning objectives",
    "text": "Learning objectives\nAt the end of this session, you should be able to answer the following questions and / or achieve the following learning objectives:\nüí° You know what version control is. üí° You can argue why version control is useful (for research). üí° You can name benefits of Git compared to other approaches to version control. üí° You can explain the difference between Git and GitHub."
  },
  {
    "objectID": "sessions/session01.html#slides",
    "href": "sessions/session01.html#slides",
    "title": "Welcome & Introduction to Version Control",
    "section": "Slides",
    "text": "Slides\n\n\n\n\n\n\n\nHow can I download the slides as a PDF file?\n\n\n\n\n\nTo export the slides to PDF, do the following:\n\nToggle into Print View using the E key (or using the Navigation Menu).\nOpen the in-browser print dialog (CTRL/CMD+P).\nChange the Destination setting to Save as PDF.\nChange the Layout to Landscape.\nChange the Margins to None.\nEnable the Background graphics option.\nClick Save.\n\nNote: This feature has been confirmed to work in Google Chrome, Chromium as well as in Firefox.\nHere‚Äôs what the Chrome print dialog would look like with these settings enabled:\n\nThese instructions were copied from the Quarto documentation (MIT License) and slightly modified."
  },
  {
    "objectID": "sessions/session01.html#email",
    "href": "sessions/session01.html#email",
    "title": "Welcome & Introduction to Version Control",
    "section": "Email",
    "text": "Email\nDear course participant,\nYou are receiving this email because you have signed up for the course ‚ÄúTrack, organize and share your work: An introduction to Git for research‚Äù, taking place on Friday, September 27th 2024, 9:30 to 15:30 at General Psychology Lab at the University of Hamburg (Room 4054 / William-Stern-Room), Von-Melle-Park 5, 20146 Hamburg.\nWe are excited that you have signed up for this course and can‚Äôt wait to delve into the world of version control with you!\nIn preparation for the course, we kindly ask you to complete two assignments: (1) check if you have Git installed, and (2) answer a survey. In total, this should take about 20 to 30 minutes (not much longer).\n1. Check Git Installation\nPlease check if you have Git installed. You can find detailed instructions in our online course book here: https://lennartwittkuhn.com/version-control-book/chapters/installation.html/. Windows users: Please install Git for Windows (https://gitforwindows.org). macOS and Linux users: You likely have Git already installed. Open the Terminal / Command Line and enter the command git --version. If a version number is shown, Git is installed. For more details, see the link to the online course book above. And please don‚Äôt forget to bring your laptop, with Git installed, to the course!\n2. Complete Survey\nIn order to tailor the course to your prior experience and needs, we have prepared a survey with a few questions. Please complete the survey before the course, ideally at least two days before the course starts. This will give us enough time to review your responses before our course on Friday.\nThe survey can be accessed here: https://version-control-intro.formr.org.\nA few technical remarks about the survey: The survey will ask you for two codewords: a personal codeword and a course codeword.\nThe personal codeword is used to associate your responses with a unique identifier. This will allow us to identify and relate your responses across all surveys used in the course while ensuring anonymity. By providing a personal codeword, you will allow us to draw more detailed insights from your responses that will help us improve the course for you. The survey will contain an explanation at the beginning on how to generate your personal codeword.\nThe course codeword is used to tag your responses as coming from a course participant at General Psychology Lab at the University of Hamburg. We might also use the survey to collect responses from participants in other course settings. The course codeword therefore allows us to distinguish responses from different course settings.\nThe course codeword is: -------- (course password will be announced during the course).\nPlease note that you might be asked for the codewords repeatedly. This is not an error in the survey but the result of combining separate smaller surveys into a longer one. If this happens, please just enter the personal and course codeword again.\nFurther information about the course can be found on our course website at https://lennartwittkuhn.com/version-control-course-uhh-2024/.\nIf you have any questions, feel free to contact us directly via email.\nWe are looking forward to seeing you at the course on Friday, September 27th 2024!\nBest wishes,\nLennart Wittkuhn (Instructor) and the organizing team"
  },
  {
    "objectID": "sessions/session07.html",
    "href": "sessions/session07.html",
    "title": "Collaboration on GitLab / GitHub",
    "section": "",
    "text": "Slides\n  \n  \n    \n     Chapter: GitHub - Advanced\n  \n  \n    \n     Chapter: Issues\n  \n  \n    \n     Quiz"
  },
  {
    "objectID": "sessions/session07.html#this-session",
    "href": "sessions/session07.html#this-session",
    "title": "Collaboration on GitLab / GitHub",
    "section": "This session",
    "text": "This session\nIn this session, you will work on the following tasks:\n\n Reading: Read the chapter ‚ÄúGitHub - Advanced‚Äù in the Version Control Book.\n Implementation: Try out the commands in the chapter.\n Exercises: Work on the exercises for the recipes project.\n Quiz: Test your knowledge with the quiz.\n\nAs always:\n\nTry out the commands of this session and play around with them.\nCheck whether you have achieved the learning objectives.\nAsk questions!\nLet‚Äôs git started!"
  },
  {
    "objectID": "sessions/session07.html#learning-objectives",
    "href": "sessions/session07.html#learning-objectives",
    "title": "Collaboration on GitLab / GitHub",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nRemotes - Advanced\nüí° You can fork a repository. üí° You know the purpose and components of a Pull Request. üí° You can create a Pull Request from a forked repository. üí° You know how to collaborate using the popular workflow strategy GitHub flow. üí° You know the purpose and components of a README file. üí° You can protect your main branch.\n\n\nIssues\nüí° You understand the purpose of GitHub Issues. üí° You can create and manage Issues. üí° You can reference an Issue in another issue. üí° You can close an Issue with a commit or pull request."
  },
  {
    "objectID": "sessions/session07.html#recipes-project",
    "href": "sessions/session07.html#recipes-project",
    "title": "Collaboration on GitLab / GitHub",
    "section": "recipes project",
    "text": "recipes project\nAt the end of this session, you should have accomplished the following:\n\nYou forked a public / internal recipes repository of another course participant.\nYou opened an Issue in another repository.\nYou created a pull request with changes that ‚Äúfix‚Äù the Issue you opened.\nYou reviewed and merged a pull request to integrate new content from a partner.\n\nPlease keep the recipes folder! We will continue to use it in the following sessions."
  },
  {
    "objectID": "sessions/session07.html#exercises",
    "href": "sessions/session07.html#exercises",
    "title": "Collaboration on GitLab / GitHub",
    "section": "Exercises",
    "text": "Exercises\n\n‚ÄúPublic‚Äù collaboration with pull requests (using a fork and GitHub Flow)\n\nFind out what forking is.\nFork the recipes repository of another course participant (ideally someone who is not your collaborator from the previous exercise).\nCreate an Issue in your new collaborator‚Äôs repository (maybe their repository is missing a great recipe?).\nRepeat the steps from the exercise on collaboration with remote repositories using the forked repository:\n\nClone the forked repository into a sensible location on your computer.\nCreate a new branch and create one or multiple commits ‚Äúfixing‚Äù the Issue that you opened. If available, follow the contributing guide of your collaborator‚Äôs repository.\nPush your changes to the remote repository.\nCreate a pull / merge request with your changes (hint: from the forked to the original repository) and refer to the Issue in your pull / merge request.\n\n\n\n\nReviewing pull requests\n\nView any pull requests that are created in your recipes repository.\nReview the changes made by the contributor in the pull request.\nIf needed, discuss additional changes with the contributor in the pull request.\nClose the pull request by merging the proposed changes."
  },
  {
    "objectID": "sessions/session07.html#bonus-exercises",
    "href": "sessions/session07.html#bonus-exercises",
    "title": "Collaboration on GitLab / GitHub",
    "section": "üöÄ Bonus exercises",
    "text": "üöÄ Bonus exercises\n\nRepeat the entire forking workflow with Lennart‚Äôs recipes repository. Find out about the contributing guidelines in Lennart‚Äôs repo and follow them when creating a new recipe."
  },
  {
    "objectID": "sessions/session07.html#slides",
    "href": "sessions/session07.html#slides",
    "title": "Collaboration on GitLab / GitHub",
    "section": "Slides",
    "text": "Slides\n\n\n\n\n\n\n\nHow can I download the slides as a PDF file?\n\n\n\n\n\nTo export the slides to PDF, do the following:\n\nToggle into Print View using the E key (or using the Navigation Menu).\nOpen the in-browser print dialog (CTRL/CMD+P).\nChange the Destination setting to Save as PDF.\nChange the Layout to Landscape.\nChange the Margins to None.\nEnable the Background graphics option.\nClick Save.\n\nNote: This feature has been confirmed to work in Google Chrome, Chromium as well as in Firefox.\nHere‚Äôs what the Chrome print dialog would look like with these settings enabled:\n\nThese instructions were copied from the Quarto documentation (MIT License) and slightly modified."
  },
  {
    "objectID": "sessions/session07.html#cheatsheet",
    "href": "sessions/session07.html#cheatsheet",
    "title": "Collaboration on GitLab / GitHub",
    "section": "Cheatsheet",
    "text": "Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit remote\nManages remote repositories\n\n\ngit clone\nCreates a local copy of a repository\n\n\ngit pull\nFetches and merges the latest changes from a remote repository into the current branch\n\n\ngit fetch\nUpdates remote tracking branches\n\n\ngit push\nUploads local commits to a remote repository"
  },
  {
    "objectID": "mechanics.html",
    "href": "mechanics.html",
    "title": "Mechanics",
    "section": "",
    "text": "Date: ?var:project.when-semester\n\n Time: 9:30 to 15:30\n\n Instructor: Dr.¬†Lennart Wittkuhn\n\n Language: English\n\n Venue: General Psychology Lab at the University of Hamburg, Von-Melle-Park 5, 20146 Hamburg, Room 4054 / William-Stern-Room\n\n Registration: The registration period starts on ?var:project.registration-start and ends on ?var:project.registration-end."
  },
  {
    "objectID": "mechanics.html#overview",
    "href": "mechanics.html#overview",
    "title": "Mechanics",
    "section": "",
    "text": "Date: ?var:project.when-semester\n\n Time: 9:30 to 15:30\n\n Instructor: Dr.¬†Lennart Wittkuhn\n\n Language: English\n\n Venue: General Psychology Lab at the University of Hamburg, Von-Melle-Park 5, 20146 Hamburg, Room 4054 / William-Stern-Room\n\n Registration: The registration period starts on ?var:project.registration-start and ends on ?var:project.registration-end."
  },
  {
    "objectID": "mechanics.html#what-will-the-average-seminar-session-look-like",
    "href": "mechanics.html#what-will-the-average-seminar-session-look-like",
    "title": "Mechanics",
    "section": "What will the average seminar session look like?",
    "text": "What will the average seminar session look like?\nThe course will consist of a maximum of 14 sessions, each lasting 90 minutes (for more details, refer to the schedule). Each course session follows a roughly structured format as outlined below:\n\n Content Review (up to 30 minutes):  Course participants engage with the online materials, supplemented by concise presentations by the instructors. Some course preparation may occur outside of the class.\n Interactive Discussions & Quizzes (up to 15 minutes): Course participants collectively address any inquiries related to the session‚Äôs content and online materials. Instructor-led quiz questions may also be interspersed throughout.\n Exercises & Implementation (up to 60 minutes): Course participants actively delve into hands-on exercises and assignments.\n\nNote, that course participants are sometimes required to work on course materials outside of class time. Not all course contents will be covered during class time."
  },
  {
    "objectID": "mechanics.html#course-materials",
    "href": "mechanics.html#course-materials",
    "title": "Mechanics",
    "section": "Course Materials",
    "text": "Course Materials\n\nTextbook: Version Control Book\nStudents will be asked to study specific chapters in the Version Control Book. The Version Control Book aims to summarize all the relevant course contents for the students, effectively serving as a textbook for the course. In addition, we will provide references to multiple other learning resources, allowing students to pick from those learning resources that they feel supports their learning process best."
  },
  {
    "objectID": "mechanics.html#prerequisites",
    "href": "mechanics.html#prerequisites",
    "title": "Mechanics",
    "section": "Prerequisites",
    "text": "Prerequisites\nThere are no prerequisites to take part in this course. Programming experience (any language) can be beneficial but is not required to follow the course contents."
  },
  {
    "objectID": "mechanics.html#active-learning",
    "href": "mechanics.html#active-learning",
    "title": "Mechanics",
    "section": "Active Learning",
    "text": "Active Learning\nActive learning in this class involves engaging in hands-on coding activities during class time. Research on active learning indicates that this approach promotes a greater understanding and retention of the material compared to passive teaching methods (see e.g., Deslauriers et al., 2019)."
  },
  {
    "objectID": "mechanics.html#assignments",
    "href": "mechanics.html#assignments",
    "title": "Mechanics",
    "section": "Assignments",
    "text": "Assignments\nStudents will work on assignments (individually or in pairs) during class."
  },
  {
    "objectID": "mechanics.html#pair-programming",
    "href": "mechanics.html#pair-programming",
    "title": "Mechanics",
    "section": "Pair Programming",
    "text": "Pair Programming\n\nPair programming is a software development technique in which two programmers work together at one workstation. One, the driver, writes code while the other, the observer or navigator (Williams, 2001), reviews each line of code as it is typed in. The two programmers switch roles frequently. ‚Äì Source: Wikipedia"
  },
  {
    "objectID": "mechanics.html#implementation",
    "href": "mechanics.html#implementation",
    "title": "Mechanics",
    "section": "Implementation",
    "text": "Implementation\n\n‚ÄúFor training to have an impact, students must implement what they‚Äôve learned in their own research.‚Äù (Weissgerber, 2023)\n\nHeise et al. (2023) outline actions that course organizers can take to prepare and support course participants in implementing what they have learned once they return to their research environment.\nOn this page we consider how to apply the recommendations by Heise et al. (2023) to our course in detail."
  },
  {
    "objectID": "mechanics.html#module",
    "href": "mechanics.html#module",
    "title": "Mechanics",
    "section": "Module",
    "text": "Module\nThis course will be offered as part of the ‚ÄúPsychologischer Wahlbereich‚Äù module of the M.Sc. Psychology (Research, as of WiSe 23/24) at the University of Hamburg.\n\nThe Master of Science in Psychology is a consecutive program that is strongly research-oriented. The regular period of study is 4 semesters. Teaching language is primarily English. The degree program comprises 8 modules with 2 complementary areas of concentration.\n\n\n\nClick here to view the full module description (in German)."
  },
  {
    "objectID": "mechanics.html#references",
    "href": "mechanics.html#references",
    "title": "Mechanics",
    "section": "References",
    "text": "References\n\n\nDeslauriers, L., McCarty, L. S., Miller, K., Callaghan, K., & Kestin, G. (2019). Measuring actual learning versus feeling of learning in response to being actively engaged in the classroom. Proceedings of the National Academy of Sciences, 116(39), 19251‚Äì19257. https://doi.org/10.1073/pnas.1821936116. License: CC BY-NC-ND.\n\n\nHeise, V., Holman, C., Lo, H., Lyras, E. M., Adkins, M. C., Aquino, M. R. J., Bougioukas, K. I., Bray, K. O., Gajos, M., Guo, X., Hartling, C., Huerta-Gutierrez, R., Jindrov√°, M., Kenney, J. P. M., Kƒôpi≈Ñska, A. P., Kneller, L., Lopez-Rodriguez, E., M√ºhlensiepen, F., Richards, A., ‚Ä¶ Weissgerber, T. L. (2023). Ten simple rules for implementing open and reproducible research practices after attending a training course. PLOS Computational Biology, 19(1), e1010750. https://doi.org/10.1371/journal.pcbi.1010750. License: CC BY 4.0.\n\n\nMillman, K. J., Brett, M., Barnowski, R., & Poline, J.-B. (2018). Teaching computational reproducibility for neuroimaging. Frontiers in Neuroscience, 12. https://doi.org/10.3389/fnins.2018.00727.\n\n\nWeissgerber, T. L. (2023). Bridging the gap: From education to implementation. https://doi.org/10.5281/ZENODO.7974345. License: CC BY 4.0.\n\n\nWilliams, L. (2001). Integrating pair programming into a software development process. Proceedings 14th Conference on Software Engineering Education and Training. ‚ÄôIn Search of a Software Engineering Profession‚Äô (Cat. No.PR01059). https://doi.org/10.1109/csee.2001.913816. License: Unknown.\n\n\nWilson, R. C. (2021). NSCS 344 ‚Äî modeling the mind. University of Arizona. https://u.arizona.edu/~bob/web_NSCS344/. License: Unknown."
  }
]